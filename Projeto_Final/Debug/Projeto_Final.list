
Projeto_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002af4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08002bb4  08002bb4  00012bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f90  08002f90  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002f90  08002f90  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f90  08002f90  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f90  08002f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08002f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000014  08002fac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  08002fac  00020464  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afbd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d3a  00000000  00000000  0002aff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e0  00000000  00000000  0002cd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001033c  00000000  00000000  0002d718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000b16f  00000000  00000000  0003da54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000604e9  00000000  00000000  00048bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  000a90ac  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000008f8  00000000  00000000  000a9100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002204  00000000  00000000  000a99f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000014 	.word	0x20000014
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002b9c 	.word	0x08002b9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000018 	.word	0x20000018
 8000104:	08002b9c 	.word	0x08002b9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <Send_cmd>:
# define Version    0xFF
# define Cmd_Len    0x06
# define Feedback   0x00    //If need for Feedback: 0x01,  No Feedback: 0

void Send_cmd (uint8_t cmd, uint8_t Parameter1, uint8_t Parameter2)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	0004      	movs	r4, r0
 80003fc:	0008      	movs	r0, r1
 80003fe:	0011      	movs	r1, r2
 8000400:	1dfb      	adds	r3, r7, #7
 8000402:	1c22      	adds	r2, r4, #0
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	1dbb      	adds	r3, r7, #6
 8000408:	1c02      	adds	r2, r0, #0
 800040a:	701a      	strb	r2, [r3, #0]
 800040c:	1d7b      	adds	r3, r7, #5
 800040e:	1c0a      	adds	r2, r1, #0
 8000410:	701a      	strb	r2, [r3, #0]
	uint16_t Checksum = Version + Cmd_Len + cmd + Feedback + Parameter1 + Parameter2;
 8000412:	1dfb      	adds	r3, r7, #7
 8000414:	781b      	ldrb	r3, [r3, #0]
 8000416:	b29a      	uxth	r2, r3
 8000418:	1dbb      	adds	r3, r7, #6
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	b29b      	uxth	r3, r3
 800041e:	18d3      	adds	r3, r2, r3
 8000420:	b29a      	uxth	r2, r3
 8000422:	1d7b      	adds	r3, r7, #5
 8000424:	781b      	ldrb	r3, [r3, #0]
 8000426:	b29b      	uxth	r3, r3
 8000428:	18d3      	adds	r3, r2, r3
 800042a:	b29a      	uxth	r2, r3
 800042c:	2016      	movs	r0, #22
 800042e:	183b      	adds	r3, r7, r0
 8000430:	3206      	adds	r2, #6
 8000432:	32ff      	adds	r2, #255	; 0xff
 8000434:	801a      	strh	r2, [r3, #0]
	Checksum = 0-Checksum;
 8000436:	183b      	adds	r3, r7, r0
 8000438:	183a      	adds	r2, r7, r0
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	4252      	negs	r2, r2
 800043e:	801a      	strh	r2, [r3, #0]

	uint8_t CmdSequence[10] = { Start_Byte, Version, Cmd_Len, cmd, Feedback, Parameter1, Parameter2, (Checksum>>8)&0x00ff, (Checksum&0x00ff), End_Byte};
 8000440:	210c      	movs	r1, #12
 8000442:	187b      	adds	r3, r7, r1
 8000444:	227e      	movs	r2, #126	; 0x7e
 8000446:	701a      	strb	r2, [r3, #0]
 8000448:	187b      	adds	r3, r7, r1
 800044a:	22ff      	movs	r2, #255	; 0xff
 800044c:	705a      	strb	r2, [r3, #1]
 800044e:	187b      	adds	r3, r7, r1
 8000450:	2206      	movs	r2, #6
 8000452:	709a      	strb	r2, [r3, #2]
 8000454:	187b      	adds	r3, r7, r1
 8000456:	1dfa      	adds	r2, r7, #7
 8000458:	7812      	ldrb	r2, [r2, #0]
 800045a:	70da      	strb	r2, [r3, #3]
 800045c:	187b      	adds	r3, r7, r1
 800045e:	2200      	movs	r2, #0
 8000460:	711a      	strb	r2, [r3, #4]
 8000462:	187b      	adds	r3, r7, r1
 8000464:	1dba      	adds	r2, r7, #6
 8000466:	7812      	ldrb	r2, [r2, #0]
 8000468:	715a      	strb	r2, [r3, #5]
 800046a:	187b      	adds	r3, r7, r1
 800046c:	1d7a      	adds	r2, r7, #5
 800046e:	7812      	ldrb	r2, [r2, #0]
 8000470:	719a      	strb	r2, [r3, #6]
 8000472:	183b      	adds	r3, r7, r0
 8000474:	881b      	ldrh	r3, [r3, #0]
 8000476:	0a1b      	lsrs	r3, r3, #8
 8000478:	b29b      	uxth	r3, r3
 800047a:	b2da      	uxtb	r2, r3
 800047c:	187b      	adds	r3, r7, r1
 800047e:	71da      	strb	r2, [r3, #7]
 8000480:	183b      	adds	r3, r7, r0
 8000482:	881b      	ldrh	r3, [r3, #0]
 8000484:	b2da      	uxtb	r2, r3
 8000486:	187b      	adds	r3, r7, r1
 8000488:	721a      	strb	r2, [r3, #8]
 800048a:	187b      	adds	r3, r7, r1
 800048c:	22ef      	movs	r2, #239	; 0xef
 800048e:	725a      	strb	r2, [r3, #9]

	HAL_UART_Transmit(DF_UART, CmdSequence, 10, HAL_MAX_DELAY);
 8000490:	2301      	movs	r3, #1
 8000492:	425b      	negs	r3, r3
 8000494:	1879      	adds	r1, r7, r1
 8000496:	4804      	ldr	r0, [pc, #16]	; (80004a8 <Send_cmd+0xb4>)
 8000498:	220a      	movs	r2, #10
 800049a:	f001 ff4d 	bl	8002338 <HAL_UART_Transmit>
}
 800049e:	46c0      	nop			; (mov r8, r8)
 80004a0:	46bd      	mov	sp, r7
 80004a2:	b007      	add	sp, #28
 80004a4:	bd90      	pop	{r4, r7, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	200003dc 	.word	0x200003dc

080004ac <DF_PlayFromStart>:

void DF_PlayFromStart(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	Send_cmd(0x03,0x00,0x01);
 80004b0:	2201      	movs	r2, #1
 80004b2:	2100      	movs	r1, #0
 80004b4:	2003      	movs	r0, #3
 80004b6:	f7ff ff9d 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 80004ba:	20c8      	movs	r0, #200	; 0xc8
 80004bc:	f001 f85a 	bl	8001574 <HAL_Delay>
	Send_cmd(0x11,0x00,0x01);
 80004c0:	2201      	movs	r2, #1
 80004c2:	2100      	movs	r1, #0
 80004c4:	2011      	movs	r0, #17
 80004c6:	f7ff ff95 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 80004ca:	20c8      	movs	r0, #200	; 0xc8
 80004cc:	f001 f852 	bl	8001574 <HAL_Delay>

	OledSetCursor(0,0);
 80004d0:	2100      	movs	r1, #0
 80004d2:	2000      	movs	r0, #0
 80004d4:	f000 f974 	bl	80007c0 <OledSetCursor>
	OledPutString("Volume:16");
 80004d8:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <DF_PlayFromStart+0x4c>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 f9c4 	bl	8000868 <OledPutString>
	OledSetCursor(0,2);
 80004e0:	2102      	movs	r1, #2
 80004e2:	2000      	movs	r0, #0
 80004e4:	f000 f96c 	bl	80007c0 <OledSetCursor>
	OledPutString("Reproduzindo");
 80004e8:	4b04      	ldr	r3, [pc, #16]	; (80004fc <DF_PlayFromStart+0x50>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 f9bc 	bl	8000868 <OledPutString>
}
 80004f0:	46c0      	nop			; (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	08002bb4 	.word	0x08002bb4
 80004fc:	08002bc0 	.word	0x08002bc0

08000500 <DF_Init>:


void DF_Init (uint8_t volume)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	0002      	movs	r2, r0
 8000508:	1dfb      	adds	r3, r7, #7
 800050a:	701a      	strb	r2, [r3, #0]
	Send_cmd(0x3F, 0x00, Source);
 800050c:	2202      	movs	r2, #2
 800050e:	2100      	movs	r1, #0
 8000510:	203f      	movs	r0, #63	; 0x3f
 8000512:	f7ff ff6f 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 8000516:	20c8      	movs	r0, #200	; 0xc8
 8000518:	f001 f82c 	bl	8001574 <HAL_Delay>
	Send_cmd(0x06, 0x00, volume);
 800051c:	1dfb      	adds	r3, r7, #7
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	001a      	movs	r2, r3
 8000522:	2100      	movs	r1, #0
 8000524:	2006      	movs	r0, #6
 8000526:	f7ff ff65 	bl	80003f4 <Send_cmd>
	HAL_Delay(500);
 800052a:	23fa      	movs	r3, #250	; 0xfa
 800052c:	005b      	lsls	r3, r3, #1
 800052e:	0018      	movs	r0, r3
 8000530:	f001 f820 	bl	8001574 <HAL_Delay>
}
 8000534:	46c0      	nop			; (mov r8, r8)
 8000536:	46bd      	mov	sp, r7
 8000538:	b002      	add	sp, #8
 800053a:	bd80      	pop	{r7, pc}

0800053c <DF_Next>:

void DF_Next (void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	Send_cmd(0x01, 0x00, 0x00);
 8000540:	2200      	movs	r2, #0
 8000542:	2100      	movs	r1, #0
 8000544:	2001      	movs	r0, #1
 8000546:	f7ff ff55 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 800054a:	20c8      	movs	r0, #200	; 0xc8
 800054c:	f001 f812 	bl	8001574 <HAL_Delay>
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <DF_Pause>:

void DF_Pause (void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	Send_cmd(0x0E, 0, 0);
 800055c:	2200      	movs	r2, #0
 800055e:	2100      	movs	r1, #0
 8000560:	200e      	movs	r0, #14
 8000562:	f7ff ff47 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 8000566:	20c8      	movs	r0, #200	; 0xc8
 8000568:	f001 f804 	bl	8001574 <HAL_Delay>

	OledSetCursor(0,2);
 800056c:	2102      	movs	r1, #2
 800056e:	2000      	movs	r0, #0
 8000570:	f000 f926 	bl	80007c0 <OledSetCursor>
	OledPutString("              ");
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <DF_Pause+0x3c>)
 8000576:	0018      	movs	r0, r3
 8000578:	f000 f976 	bl	8000868 <OledPutString>
	OledSetCursor(0,2);
 800057c:	2102      	movs	r1, #2
 800057e:	2000      	movs	r0, #0
 8000580:	f000 f91e 	bl	80007c0 <OledSetCursor>
	OledPutString("Pausado");
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <DF_Pause+0x40>)
 8000586:	0018      	movs	r0, r3
 8000588:	f000 f96e 	bl	8000868 <OledPutString>
}
 800058c:	46c0      	nop			; (mov r8, r8)
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	46c0      	nop			; (mov r8, r8)
 8000594:	08002bd0 	.word	0x08002bd0
 8000598:	08002be0 	.word	0x08002be0

0800059c <DF_Playback>:

void DF_Playback (void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	Send_cmd(0x0D, 0, 0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2100      	movs	r1, #0
 80005a4:	200d      	movs	r0, #13
 80005a6:	f7ff ff25 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 80005aa:	20c8      	movs	r0, #200	; 0xc8
 80005ac:	f000 ffe2 	bl	8001574 <HAL_Delay>

	OledSetCursor(0,2);
 80005b0:	2102      	movs	r1, #2
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 f904 	bl	80007c0 <OledSetCursor>
	OledPutString("              ");
 80005b8:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <DF_Playback+0x3c>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 f954 	bl	8000868 <OledPutString>
	OledSetCursor(0,2);
 80005c0:	2102      	movs	r1, #2
 80005c2:	2000      	movs	r0, #0
 80005c4:	f000 f8fc 	bl	80007c0 <OledSetCursor>
	OledPutString("Reproduzindo");
 80005c8:	4b04      	ldr	r3, [pc, #16]	; (80005dc <DF_Playback+0x40>)
 80005ca:	0018      	movs	r0, r3
 80005cc:	f000 f94c 	bl	8000868 <OledPutString>
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	08002bd0 	.word	0x08002bd0
 80005dc:	08002bc0 	.word	0x08002bc0

080005e0 <DF_IncreaseVolume>:

void DF_IncreaseVolume (void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
	Send_cmd(0x04, 0, 0);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2100      	movs	r1, #0
 80005ea:	2004      	movs	r0, #4
 80005ec:	f7ff ff02 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 80005f0:	20c8      	movs	r0, #200	; 0xc8
 80005f2:	f000 ffbf 	bl	8001574 <HAL_Delay>

	if (volume <= 29)
 80005f6:	4b18      	ldr	r3, [pc, #96]	; (8000658 <DF_IncreaseVolume+0x78>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	2b1d      	cmp	r3, #29
 80005fc:	dc27      	bgt.n	800064e <DF_IncreaseVolume+0x6e>
	{
		volume++;
 80005fe:	4b16      	ldr	r3, [pc, #88]	; (8000658 <DF_IncreaseVolume+0x78>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <DF_IncreaseVolume+0x78>)
 8000606:	601a      	str	r2, [r3, #0]
		char string[2];
		itoa(volume, string, 10);
 8000608:	4b13      	ldr	r3, [pc, #76]	; (8000658 <DF_IncreaseVolume+0x78>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	1d39      	adds	r1, r7, #4
 800060e:	220a      	movs	r2, #10
 8000610:	0018      	movs	r0, r3
 8000612:	f002 fa77 	bl	8002b04 <itoa>

		OledSetCursor(7,0);
 8000616:	2100      	movs	r1, #0
 8000618:	2007      	movs	r0, #7
 800061a:	f000 f8d1 	bl	80007c0 <OledSetCursor>
		OledPutString("  ");
 800061e:	4b0f      	ldr	r3, [pc, #60]	; (800065c <DF_IncreaseVolume+0x7c>)
 8000620:	0018      	movs	r0, r3
 8000622:	f000 f921 	bl	8000868 <OledPutString>
		OledSetCursor(7,0);
 8000626:	2100      	movs	r1, #0
 8000628:	2007      	movs	r0, #7
 800062a:	f000 f8c9 	bl	80007c0 <OledSetCursor>
		OledPutString(string);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	0018      	movs	r0, r3
 8000632:	f000 f919 	bl	8000868 <OledPutString>

		if (volume == 30)
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <DF_IncreaseVolume+0x78>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2b1e      	cmp	r3, #30
 800063c:	d107      	bne.n	800064e <DF_IncreaseVolume+0x6e>
		{
			OledSetCursor(0,4);
 800063e:	2104      	movs	r1, #4
 8000640:	2000      	movs	r0, #0
 8000642:	f000 f8bd 	bl	80007c0 <OledSetCursor>
			OledPutString("Volume maximo!");
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <DF_IncreaseVolume+0x80>)
 8000648:	0018      	movs	r0, r3
 800064a:	f000 f90d 	bl	8000868 <OledPutString>
		}
	}
}
 800064e:	46c0      	nop			; (mov r8, r8)
 8000650:	46bd      	mov	sp, r7
 8000652:	b002      	add	sp, #8
 8000654:	bd80      	pop	{r7, pc}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	20000004 	.word	0x20000004
 800065c:	08002be8 	.word	0x08002be8
 8000660:	08002bec 	.word	0x08002bec

08000664 <DF_DecreaseVolume>:

void DF_DecreaseVolume (void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
	Send_cmd(0x05, 0, 0);
 800066a:	2200      	movs	r2, #0
 800066c:	2100      	movs	r1, #0
 800066e:	2005      	movs	r0, #5
 8000670:	f7ff fec0 	bl	80003f4 <Send_cmd>
	HAL_Delay(200);
 8000674:	20c8      	movs	r0, #200	; 0xc8
 8000676:	f000 ff7d 	bl	8001574 <HAL_Delay>

	if (volume >= 1)
 800067a:	4b18      	ldr	r3, [pc, #96]	; (80006dc <DF_DecreaseVolume+0x78>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	dd27      	ble.n	80006d2 <DF_DecreaseVolume+0x6e>
	{
		volume--;
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <DF_DecreaseVolume+0x78>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	1e5a      	subs	r2, r3, #1
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <DF_DecreaseVolume+0x78>)
 800068a:	601a      	str	r2, [r3, #0]
		char string[2];
		itoa(volume, string, 10);
 800068c:	4b13      	ldr	r3, [pc, #76]	; (80006dc <DF_DecreaseVolume+0x78>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	1d39      	adds	r1, r7, #4
 8000692:	220a      	movs	r2, #10
 8000694:	0018      	movs	r0, r3
 8000696:	f002 fa35 	bl	8002b04 <itoa>

		OledSetCursor(7,0);
 800069a:	2100      	movs	r1, #0
 800069c:	2007      	movs	r0, #7
 800069e:	f000 f88f 	bl	80007c0 <OledSetCursor>
		OledPutString("  ");
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <DF_DecreaseVolume+0x7c>)
 80006a4:	0018      	movs	r0, r3
 80006a6:	f000 f8df 	bl	8000868 <OledPutString>
		OledSetCursor(7,0);
 80006aa:	2100      	movs	r1, #0
 80006ac:	2007      	movs	r0, #7
 80006ae:	f000 f887 	bl	80007c0 <OledSetCursor>
		OledPutString(string);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 f8d7 	bl	8000868 <OledPutString>

		if (volume == 29)
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <DF_DecreaseVolume+0x78>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b1d      	cmp	r3, #29
 80006c0:	d107      	bne.n	80006d2 <DF_DecreaseVolume+0x6e>
		{
			OledSetCursor(0,4);
 80006c2:	2104      	movs	r1, #4
 80006c4:	2000      	movs	r0, #0
 80006c6:	f000 f87b 	bl	80007c0 <OledSetCursor>
			OledPutString("              ");
 80006ca:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <DF_DecreaseVolume+0x80>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f000 f8cb 	bl	8000868 <OledPutString>
		}
	}
}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	46bd      	mov	sp, r7
 80006d6:	b002      	add	sp, #8
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	46c0      	nop			; (mov r8, r8)
 80006dc:	20000004 	.word	0x20000004
 80006e0:	08002be8 	.word	0x08002be8
 80006e4:	08002bd0 	.word	0x08002bd0

080006e8 <Check_Key>:

void Check_Key (void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(Pause_Port, Pause_Key))
 80006ec:	4b31      	ldr	r3, [pc, #196]	; (80007b4 <Check_Key+0xcc>)
 80006ee:	2102      	movs	r1, #2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 f987 	bl	8001a04 <HAL_GPIO_ReadPin>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d020      	beq.n	800073c <Check_Key+0x54>
	{
		while (HAL_GPIO_ReadPin(Pause_Port, Pause_Key));
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <Check_Key+0xcc>)
 80006fe:	2102      	movs	r1, #2
 8000700:	0018      	movs	r0, r3
 8000702:	f001 f97f 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000706:	1e03      	subs	r3, r0, #0
 8000708:	d1f8      	bne.n	80006fc <Check_Key+0x14>
		if (isplaying)
 800070a:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <Check_Key+0xd0>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d008      	beq.n	8000724 <Check_Key+0x3c>
		{
			ispause = 1;
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <Check_Key+0xd4>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
			isplaying = 0;
 8000718:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <Check_Key+0xd0>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
			DF_Pause();
 800071e:	f7ff ff1b 	bl	8000558 <DF_Pause>
 8000722:	e00b      	b.n	800073c <Check_Key+0x54>
		}

		else if (ispause)
 8000724:	4b25      	ldr	r3, [pc, #148]	; (80007bc <Check_Key+0xd4>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d007      	beq.n	800073c <Check_Key+0x54>
		{
			isplaying = 1;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <Check_Key+0xd0>)
 800072e:	2201      	movs	r2, #1
 8000730:	601a      	str	r2, [r3, #0]
			ispause = 0;
 8000732:	4b22      	ldr	r3, [pc, #136]	; (80007bc <Check_Key+0xd4>)
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
			DF_Playback();
 8000738:	f7ff ff30 	bl	800059c <DF_Playback>
		}
	}

	if (HAL_GPIO_ReadPin(Decrease_Port, Decrease_Key))
 800073c:	2390      	movs	r3, #144	; 0x90
 800073e:	05db      	lsls	r3, r3, #23
 8000740:	2108      	movs	r1, #8
 8000742:	0018      	movs	r0, r3
 8000744:	f001 f95e 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d00a      	beq.n	8000762 <Check_Key+0x7a>
	{
		while (HAL_GPIO_ReadPin(Decrease_Port, Decrease_Key));
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	2390      	movs	r3, #144	; 0x90
 8000750:	05db      	lsls	r3, r3, #23
 8000752:	2108      	movs	r1, #8
 8000754:	0018      	movs	r0, r3
 8000756:	f001 f955 	bl	8001a04 <HAL_GPIO_ReadPin>
 800075a:	1e03      	subs	r3, r0, #0
 800075c:	d1f7      	bne.n	800074e <Check_Key+0x66>
		DF_DecreaseVolume();
 800075e:	f7ff ff81 	bl	8000664 <DF_DecreaseVolume>
	}

	if (HAL_GPIO_ReadPin(Increase_Port, Increase_Key))
 8000762:	2390      	movs	r3, #144	; 0x90
 8000764:	05db      	lsls	r3, r3, #23
 8000766:	2110      	movs	r1, #16
 8000768:	0018      	movs	r0, r3
 800076a:	f001 f94b 	bl	8001a04 <HAL_GPIO_ReadPin>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d00a      	beq.n	8000788 <Check_Key+0xa0>
	{
		while (HAL_GPIO_ReadPin(Increase_Port, Increase_Key));
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	2390      	movs	r3, #144	; 0x90
 8000776:	05db      	lsls	r3, r3, #23
 8000778:	2110      	movs	r1, #16
 800077a:	0018      	movs	r0, r3
 800077c:	f001 f942 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000780:	1e03      	subs	r3, r0, #0
 8000782:	d1f7      	bne.n	8000774 <Check_Key+0x8c>
		DF_IncreaseVolume();
 8000784:	f7ff ff2c 	bl	80005e0 <DF_IncreaseVolume>
	}

	if (HAL_GPIO_ReadPin(Next_Port, Next_Key))
 8000788:	2390      	movs	r3, #144	; 0x90
 800078a:	05db      	lsls	r3, r3, #23
 800078c:	2140      	movs	r1, #64	; 0x40
 800078e:	0018      	movs	r0, r3
 8000790:	f001 f938 	bl	8001a04 <HAL_GPIO_ReadPin>
 8000794:	1e03      	subs	r3, r0, #0
 8000796:	d00a      	beq.n	80007ae <Check_Key+0xc6>
	{
		while (HAL_GPIO_ReadPin(Next_Port, Next_Key));
 8000798:	46c0      	nop			; (mov r8, r8)
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2140      	movs	r1, #64	; 0x40
 80007a0:	0018      	movs	r0, r3
 80007a2:	f001 f92f 	bl	8001a04 <HAL_GPIO_ReadPin>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d1f7      	bne.n	800079a <Check_Key+0xb2>
		DF_Next();
 80007aa:	f7ff fec7 	bl	800053c <DF_Next>
	}
}
 80007ae:	46c0      	nop			; (mov r8, r8)
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	48000400 	.word	0x48000400
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000030 	.word	0x20000030

080007c0 <OledSetCursor>:
**		is clamped to be on the display.
*/

void
OledSetCursor(int xch, int ych)
	{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	6039      	str	r1, [r7, #0]

	/* Clamp the specified location to the display surface
	*/
	if (xch >= xchOledMax) {
 80007ca:	4b14      	ldr	r3, [pc, #80]	; (800081c <OledSetCursor+0x5c>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	687a      	ldr	r2, [r7, #4]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	db03      	blt.n	80007dc <OledSetCursor+0x1c>
		xch = xchOledMax-1;
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <OledSetCursor+0x5c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3b01      	subs	r3, #1
 80007da:	607b      	str	r3, [r7, #4]
	}

	if (ych >= ychOledMax) {
 80007dc:	4b10      	ldr	r3, [pc, #64]	; (8000820 <OledSetCursor+0x60>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	db03      	blt.n	80007ee <OledSetCursor+0x2e>
		ych = ychOledMax-1;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <OledSetCursor+0x60>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	603b      	str	r3, [r7, #0]
	}

	/* Save the given character location.
	*/
	xchOledCur = xch;
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <OledSetCursor+0x64>)
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	601a      	str	r2, [r3, #0]
	ychOledCur = ych;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <OledSetCursor+0x68>)
 80007f6:	683a      	ldr	r2, [r7, #0]
 80007f8:	601a      	str	r2, [r3, #0]

	/* Convert the character location to a frame buffer address.
	*/
	OledMoveTo(xch*dxcoOledFontCur, ych*dycoOledFontCur);
 80007fa:	4b0c      	ldr	r3, [pc, #48]	; (800082c <OledSetCursor+0x6c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	435a      	muls	r2, r3
 8000802:	0010      	movs	r0, r2
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <OledSetCursor+0x70>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	4353      	muls	r3, r2
 800080c:	0019      	movs	r1, r3
 800080e:	f000 fa3f 	bl	8000c90 <OledMoveTo>

}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b002      	add	sp, #8
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	2000003c 	.word	0x2000003c
 8000820:	20000040 	.word	0x20000040
 8000824:	20000034 	.word	0x20000034
 8000828:	20000038 	.word	0x20000038
 800082c:	20000160 	.word	0x20000160
 8000830:	20000164 	.word	0x20000164

08000834 <OledPutChar>:
**		cursor position and advance the cursor.
*/

void
OledPutChar(char ch)
	{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	701a      	strb	r2, [r3, #0]

	OledDrawGlyph(ch);
 8000840:	1dfb      	adds	r3, r7, #7
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	0018      	movs	r0, r3
 8000846:	f000 f82f 	bl	80008a8 <OledDrawGlyph>
	OledAdvanceCursor();
 800084a:	f000 f875 	bl	8000938 <OledAdvanceCursor>
	if (fOledCharUpdate) {
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <OledPutChar+0x30>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <OledPutChar+0x26>
		OledUpdate();
 8000856:	f000 f999 	bl	8000b8c <OledUpdate>
	}

}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	46bd      	mov	sp, r7
 800085e:	b002      	add	sp, #8
 8000860:	bd80      	pop	{r7, pc}
 8000862:	46c0      	nop			; (mov r8, r8)
 8000864:	2000015c 	.word	0x2000015c

08000868 <OledPutString>:
**		display and advance the cursor.
*/

void
OledPutString(char * sz)
	{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

	while (*sz != '\0') {
 8000870:	e009      	b.n	8000886 <OledPutString+0x1e>
		OledDrawGlyph(*sz);
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	0018      	movs	r0, r3
 8000878:	f000 f816 	bl	80008a8 <OledDrawGlyph>
		OledAdvanceCursor();
 800087c:	f000 f85c 	bl	8000938 <OledAdvanceCursor>
		sz += 1;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3301      	adds	r3, #1
 8000884:	607b      	str	r3, [r7, #4]
	while (*sz != '\0') {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f1      	bne.n	8000872 <OledPutString+0xa>
	}

	if (fOledCharUpdate) {
 800088e:	4b05      	ldr	r3, [pc, #20]	; (80008a4 <OledPutString+0x3c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <OledPutString+0x32>
		OledUpdate();
 8000896:	f000 f979 	bl	8000b8c <OledUpdate>
	}

}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	46bd      	mov	sp, r7
 800089e:	b002      	add	sp, #8
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	46c0      	nop			; (mov r8, r8)
 80008a4:	2000015c 	.word	0x2000015c

080008a8 <OledDrawGlyph>:
**		current drawing position in the display buffer.
*/

void
OledDrawGlyph(char ch)
	{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	0002      	movs	r2, r0
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
	uint8_t *	pbFont;
	uint8_t *	pbBmp;
	int		ib;

	if ((ch & 0x80) != 0) {
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b25b      	sxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	db2f      	blt.n	800091e <OledDrawGlyph+0x76>
		return;
	}

	if (ch < chOledUserMax) {
 80008be:	1dfb      	adds	r3, r7, #7
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b1f      	cmp	r3, #31
 80008c4:	d807      	bhi.n	80008d6 <OledDrawGlyph+0x2e>
		pbFont = pbOledFontUser + ch*cbOledChar;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <OledDrawGlyph+0x80>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	1dfa      	adds	r2, r7, #7
 80008cc:	7812      	ldrb	r2, [r2, #0]
 80008ce:	00d2      	lsls	r2, r2, #3
 80008d0:	189b      	adds	r3, r3, r2
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	e00c      	b.n	80008f0 <OledDrawGlyph+0x48>
	}
	else if ((ch & 0x80) == 0) {
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	b25b      	sxtb	r3, r3
 80008dc:	2b00      	cmp	r3, #0
 80008de:	db07      	blt.n	80008f0 <OledDrawGlyph+0x48>
		pbFont = pbOledFontCur + (ch-chOledUserMax) * cbOledChar;
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <OledDrawGlyph+0x84>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1dfa      	adds	r2, r7, #7
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	3a20      	subs	r2, #32
 80008ea:	00d2      	lsls	r2, r2, #3
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
	}

	pbBmp = pbOledCur;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <OledDrawGlyph+0x88>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	613b      	str	r3, [r7, #16]

	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
 80008fa:	e00a      	b.n	8000912 <OledDrawGlyph+0x6a>
		*pbBmp++ = *pbFont++;
 80008fc:	697a      	ldr	r2, [r7, #20]
 80008fe:	1c53      	adds	r3, r2, #1
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	693b      	ldr	r3, [r7, #16]
 8000904:	1c59      	adds	r1, r3, #1
 8000906:	6139      	str	r1, [r7, #16]
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < dxcoOledFontCur; ib++) {
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	3301      	adds	r3, #1
 8000910:	60fb      	str	r3, [r7, #12]
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <OledDrawGlyph+0x8c>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	68fa      	ldr	r2, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	dbef      	blt.n	80008fc <OledDrawGlyph+0x54>
 800091c:	e000      	b.n	8000920 <OledDrawGlyph+0x78>
		return;
 800091e:	46c0      	nop			; (mov r8, r8)
	}

}
 8000920:	46bd      	mov	sp, r7
 8000922:	b006      	add	sp, #24
 8000924:	bd80      	pop	{r7, pc}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	2000016c 	.word	0x2000016c
 800092c:	20000168 	.word	0x20000168
 8000930:	2000014c 	.word	0x2000014c
 8000934:	20000160 	.word	0x20000160

08000938 <OledAdvanceCursor>:
**		end of the display.
*/

void
OledAdvanceCursor()
	{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

	xchOledCur += 1;
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <OledAdvanceCursor+0x54>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	1c5a      	adds	r2, r3, #1
 8000942:	4b12      	ldr	r3, [pc, #72]	; (800098c <OledAdvanceCursor+0x54>)
 8000944:	601a      	str	r2, [r3, #0]
	if (xchOledCur >= xchOledMax) {
 8000946:	4b11      	ldr	r3, [pc, #68]	; (800098c <OledAdvanceCursor+0x54>)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <OledAdvanceCursor+0x58>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	429a      	cmp	r2, r3
 8000950:	db07      	blt.n	8000962 <OledAdvanceCursor+0x2a>
		xchOledCur = 0;
 8000952:	4b0e      	ldr	r3, [pc, #56]	; (800098c <OledAdvanceCursor+0x54>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
		ychOledCur += 1;
 8000958:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <OledAdvanceCursor+0x5c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	4b0d      	ldr	r3, [pc, #52]	; (8000994 <OledAdvanceCursor+0x5c>)
 8000960:	601a      	str	r2, [r3, #0]
	}
	if (ychOledCur >= ychOledMax) {
 8000962:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <OledAdvanceCursor+0x5c>)
 8000964:	681a      	ldr	r2, [r3, #0]
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <OledAdvanceCursor+0x60>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	429a      	cmp	r2, r3
 800096c:	db02      	blt.n	8000974 <OledAdvanceCursor+0x3c>
		ychOledCur = 0;
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <OledAdvanceCursor+0x5c>)
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
	}

	OledSetCursor(xchOledCur, ychOledCur);
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <OledAdvanceCursor+0x54>)
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <OledAdvanceCursor+0x5c>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	0019      	movs	r1, r3
 800097e:	0010      	movs	r0, r2
 8000980:	f7ff ff1e 	bl	80007c0 <OledSetCursor>

}
 8000984:	46c0      	nop			; (mov r8, r8)
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	20000034 	.word	0x20000034
 8000990:	2000003c 	.word	0x2000003c
 8000994:	20000038 	.word	0x20000038
 8000998:	20000040 	.word	0x20000040

0800099c <OledInit>:
**		Initialize the OLED display subsystem.
*/

void
OledInit()
	{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0

	/* Init the PIC32 peripherals used to talk to the display.
	*/
	OledHostInit();
 80009a0:	f000 f809 	bl	80009b6 <OledHostInit>

	/* Init the memory variables used to control access to the
	** display.
	*/
	OledDvrInit();
 80009a4:	f000 f82a 	bl	80009fc <OledDvrInit>

	/* Init the OLED display hardware.
	*/
	OledDevInit();
 80009a8:	f000 f886 	bl	8000ab8 <OledDevInit>

	/* Clear the display.
	*/
	OledClear();
 80009ac:	f000 f8c8 	bl	8000b40 <OledClear>

}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <OledHostInit>:
**		SPI2. This needs to be generalized.
*/

void
OledHostInit()
	{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0

	//pinMode(DataCmd, OUTPUT);
	//pinMode(VbatCtrl, OUTPUT);
	//pinMode(VddCtrl, OUTPUT);

	digitalWrite(DataCmd, HIGH);
 80009ba:	2302      	movs	r3, #2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	2101      	movs	r1, #1
 80009c0:	0018      	movs	r0, r3
 80009c2:	f000 f94f 	bl	8000c64 <digitalWrite>
	digitalWrite(VbatCtrl, HIGH);
 80009c6:	2308      	movs	r3, #8
 80009c8:	b29b      	uxth	r3, r3
 80009ca:	2101      	movs	r1, #1
 80009cc:	0018      	movs	r0, r3
 80009ce:	f000 f949 	bl	8000c64 <digitalWrite>
	digitalWrite(VddCtrl, HIGH);
 80009d2:	2310      	movs	r3, #16
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	2101      	movs	r1, #1
 80009d8:	0018      	movs	r0, r3
 80009da:	f000 f943 	bl	8000c64 <digitalWrite>

	// pinMode(Reset, OUTPUT);
	digitalWrite(Reset, HIGH);
 80009de:	2304      	movs	r3, #4
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	2101      	movs	r1, #1
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 f93d 	bl	8000c64 <digitalWrite>


	digitalWrite(ChipSelect, LOW); //spiCon.setSelect(LOW);
 80009ea:	2301      	movs	r3, #1
 80009ec:	b29b      	uxth	r3, r3
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f000 f937 	bl	8000c64 <digitalWrite>

}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <OledDvrInit>:
**		Initialize the OLED software system
*/

void
OledDvrInit()
	{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
	int		ib;

	/* Init the parameters for the default font
	*/
	dxcoOledFontCur = cbOledChar;
 8000a02:	4b21      	ldr	r3, [pc, #132]	; (8000a88 <OledDvrInit+0x8c>)
 8000a04:	2208      	movs	r2, #8
 8000a06:	601a      	str	r2, [r3, #0]
	dycoOledFontCur = 8;
 8000a08:	4b20      	ldr	r3, [pc, #128]	; (8000a8c <OledDvrInit+0x90>)
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	601a      	str	r2, [r3, #0]
	pbOledFontCur = (uint8_t*)rgbOledFont0;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <OledDvrInit+0x94>)
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <OledDvrInit+0x98>)
 8000a12:	601a      	str	r2, [r3, #0]
	pbOledFontUser = rgbOledFontUser;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <OledDvrInit+0x9c>)
 8000a16:	4a21      	ldr	r2, [pc, #132]	; (8000a9c <OledDvrInit+0xa0>)
 8000a18:	601a      	str	r2, [r3, #0]

	for (ib = 0; ib < cbOledFontUser; ib++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	e007      	b.n	8000a30 <OledDvrInit+0x34>
		rgbOledFontUser[ib] = 0;
 8000a20:	4a1e      	ldr	r2, [pc, #120]	; (8000a9c <OledDvrInit+0xa0>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	18d3      	adds	r3, r2, r3
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < cbOledFontUser; ib++) {
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	2bff      	cmp	r3, #255	; 0xff
 8000a34:	ddf4      	ble.n	8000a20 <OledDvrInit+0x24>
	}

	xchOledMax = ccolOledMax / dxcoOledFontCur;
 8000a36:	4b14      	ldr	r3, [pc, #80]	; (8000a88 <OledDvrInit+0x8c>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	2080      	movs	r0, #128	; 0x80
 8000a3e:	f7ff fbed 	bl	800021c <__divsi3>
 8000a42:	0003      	movs	r3, r0
 8000a44:	001a      	movs	r2, r3
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <OledDvrInit+0xa4>)
 8000a48:	601a      	str	r2, [r3, #0]
	ychOledMax = crowOledMax / dycoOledFontCur;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <OledDvrInit+0x90>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	0019      	movs	r1, r3
 8000a50:	2020      	movs	r0, #32
 8000a52:	f7ff fbe3 	bl	800021c <__divsi3>
 8000a56:	0003      	movs	r3, r0
 8000a58:	001a      	movs	r2, r3
 8000a5a:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <OledDvrInit+0xa8>)
 8000a5c:	601a      	str	r2, [r3, #0]

	/* Set the default character cursor position.
	*/
	OledSetCursor(0, 0);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f7ff fead 	bl	80007c0 <OledSetCursor>

	/* Set the default foreground draw color and fill pattern
	*/
	clrOledCur = 0x01;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <OledDvrInit+0xac>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	701a      	strb	r2, [r3, #0]
	pbOledPatCur = (uint8_t*)rgbFillPat;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <OledDvrInit+0xb0>)
 8000a6e:	4a10      	ldr	r2, [pc, #64]	; (8000ab0 <OledDvrInit+0xb4>)
 8000a70:	601a      	str	r2, [r3, #0]
	OledSetDrawMode(modOledSet);
 8000a72:	2000      	movs	r0, #0
 8000a74:	f000 f942 	bl	8000cfc <OledSetDrawMode>

	/* Default the character routines to automaticall
	** update the display.
	*/
	fOledCharUpdate = 1;
 8000a78:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <OledDvrInit+0xb8>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]

}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b002      	add	sp, #8
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	20000160 	.word	0x20000160
 8000a8c:	20000164 	.word	0x20000164
 8000a90:	20000168 	.word	0x20000168
 8000a94:	08002c20 	.word	0x08002c20
 8000a98:	2000016c 	.word	0x2000016c
 8000a9c:	20000044 	.word	0x20000044
 8000aa0:	2000003c 	.word	0x2000003c
 8000aa4:	20000040 	.word	0x20000040
 8000aa8:	20000154 	.word	0x20000154
 8000aac:	20000158 	.word	0x20000158
 8000ab0:	08002f20 	.word	0x08002f20
 8000ab4:	2000015c 	.word	0x2000015c

08000ab8 <OledDevInit>:
**		Initialize the OLED display controller and turn the display on.
*/

void
OledDevInit()
	{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0

	/* We're going to be sending commands, so clear the Data/Cmd bit
	*/
	digitalWrite(DataCmd, LOW);
 8000abc:	2302      	movs	r3, #2
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f000 f8ce 	bl	8000c64 <digitalWrite>

	/* Start by turning VDD on and wait a while for the power to come up.
	*/
	digitalWrite(VddCtrl, LOW);
 8000ac8:	2310      	movs	r3, #16
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	2100      	movs	r1, #0
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f000 f8c8 	bl	8000c64 <digitalWrite>
	HAL_Delay(1);
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	f000 fd4d 	bl	8001574 <HAL_Delay>
	//delay(1);

	/* Display off command
	*/
	Spi2PutByte(cmdOledDisplayOff);
 8000ada:	20ae      	movs	r0, #174	; 0xae
 8000adc:	f000 f8ae 	bl	8000c3c <Spi2PutByte>

	/* Bring Reset low and then high
	*/
	digitalWrite(Reset, LOW);
 8000ae0:	2304      	movs	r3, #4
 8000ae2:	b29b      	uxth	r3, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f000 f8bc 	bl	8000c64 <digitalWrite>
	//delay(1);
	digitalWrite(Reset, HIGH);
 8000aec:	2304      	movs	r3, #4
 8000aee:	b29b      	uxth	r3, r3
 8000af0:	2101      	movs	r1, #1
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f8b6 	bl	8000c64 <digitalWrite>

	/* Send the Set Charge Pump and Set Pre-Charge Period commands
	*/
	Spi2PutByte(0x8D);		//From Univision data sheet, not in SSD1306 data sheet
 8000af8:	208d      	movs	r0, #141	; 0x8d
 8000afa:	f000 f89f 	bl	8000c3c <Spi2PutByte>
	Spi2PutByte(0x14);
 8000afe:	2014      	movs	r0, #20
 8000b00:	f000 f89c 	bl	8000c3c <Spi2PutByte>

	Spi2PutByte(0xD9);		//From Univision data sheet, not in SSD1306 data sheet
 8000b04:	20d9      	movs	r0, #217	; 0xd9
 8000b06:	f000 f899 	bl	8000c3c <Spi2PutByte>
	Spi2PutByte(0xF1);
 8000b0a:	20f1      	movs	r0, #241	; 0xf1
 8000b0c:	f000 f896 	bl	8000c3c <Spi2PutByte>

	/* Turn on VCC and wait 100ms
	*/
	digitalWrite(VbatCtrl, LOW);
 8000b10:	2308      	movs	r3, #8
 8000b12:	b29b      	uxth	r3, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	0018      	movs	r0, r3
 8000b18:	f000 f8a4 	bl	8000c64 <digitalWrite>
	// delay(100);

	/* Send the commands to invert the display.
	*/
	Spi2PutByte(cmdOledSegRemap);		//remap columns
 8000b1c:	20a1      	movs	r0, #161	; 0xa1
 8000b1e:	f000 f88d 	bl	8000c3c <Spi2PutByte>
	Spi2PutByte(cmdOledComDir);			//remap the rows
 8000b22:	20c8      	movs	r0, #200	; 0xc8
 8000b24:	f000 f88a 	bl	8000c3c <Spi2PutByte>

	/* Send the commands to select sequential COM configuration
	*/
	Spi2PutByte(cmdOledComConfig);		//set COM configuration command
 8000b28:	20da      	movs	r0, #218	; 0xda
 8000b2a:	f000 f887 	bl	8000c3c <Spi2PutByte>
	Spi2PutByte(0x20);					//sequential COM, left/right remap enabled
 8000b2e:	2020      	movs	r0, #32
 8000b30:	f000 f884 	bl	8000c3c <Spi2PutByte>

	/* Send Display On command
	*/
	Spi2PutByte(cmdOledDisplayOn);
 8000b34:	20af      	movs	r0, #175	; 0xaf
 8000b36:	f000 f881 	bl	8000c3c <Spi2PutByte>

}
 8000b3a:	46c0      	nop			; (mov r8, r8)
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <OledClear>:
**		updates the display.
*/

void
OledClear()
	{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0

	OledClearBuffer();
 8000b44:	f000 f806 	bl	8000b54 <OledClearBuffer>
	OledUpdate();
 8000b48:	f000 f820 	bl	8000b8c <OledUpdate>

}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <OledClearBuffer>:
**		Clear the display memory buffer.
*/

void
OledClearBuffer()
	{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
	int			ib;
	uint8_t *		pb;

	pb = rgbOledBmp;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <OledClearBuffer+0x34>)
 8000b5c:	603b      	str	r3, [r7, #0]

	/* Fill the memory buffer with 0.
	*/
	for (ib = 0; ib < cbOledDispMax; ib++) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	e007      	b.n	8000b74 <OledClearBuffer+0x20>
		*pb++ = 0x00;
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	603a      	str	r2, [r7, #0]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	701a      	strb	r2, [r3, #0]
	for (ib = 0; ib < cbOledDispMax; ib++) {
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3301      	adds	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687a      	ldr	r2, [r7, #4]
 8000b76:	2380      	movs	r3, #128	; 0x80
 8000b78:	009b      	lsls	r3, r3, #2
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	dbf2      	blt.n	8000b64 <OledClearBuffer+0x10>
	}

}
 8000b7e:	46c0      	nop			; (mov r8, r8)
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	b002      	add	sp, #8
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20000170 	.word	0x20000170

08000b8c <OledUpdate>:
**		Update the OLED display with the contents of the memory buffer
*/

void
OledUpdate()
	{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	int		ipag;
	int		icol;
	uint8_t *	pb;

	pb = rgbOledBmp;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <OledUpdate+0x6c>)
 8000b94:	603b      	str	r3, [r7, #0]

	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e024      	b.n	8000be6 <OledUpdate+0x5a>

		digitalWrite(DataCmd, LOW);
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f000 f85e 	bl	8000c64 <digitalWrite>

		/* Set the page address
		*/
		Spi2PutByte(0x22);		//Set page command
 8000ba8:	2022      	movs	r0, #34	; 0x22
 8000baa:	f000 f847 	bl	8000c3c <Spi2PutByte>
		Spi2PutByte(ipag);		//page number
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 f842 	bl	8000c3c <Spi2PutByte>

		/* Start at the left column
		*/
		Spi2PutByte(0x00);		//set low nybble of column
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f000 f83f 	bl	8000c3c <Spi2PutByte>
		Spi2PutByte(0x10);		//set high nybble of column
 8000bbe:	2010      	movs	r0, #16
 8000bc0:	f000 f83c 	bl	8000c3c <Spi2PutByte>

		digitalWrite(DataCmd, HIGH);
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	2101      	movs	r1, #1
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f000 f84a 	bl	8000c64 <digitalWrite>

		/* Copy this memory page of display data.
		*/
		OledPutBuffer(ccolOledMax, pb);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	0019      	movs	r1, r3
 8000bd4:	2080      	movs	r0, #128	; 0x80
 8000bd6:	f000 f811 	bl	8000bfc <OledPutBuffer>
		pb += ccolOledMax;
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	3380      	adds	r3, #128	; 0x80
 8000bde:	603b      	str	r3, [r7, #0]
	for (ipag = 0; ipag < cpagOledMax; ipag++) {
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3301      	adds	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	ddd7      	ble.n	8000b9c <OledUpdate+0x10>

	}

}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b002      	add	sp, #8
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	20000170 	.word	0x20000170

08000bfc <OledPutBuffer>:
**		Send the bytes specified in rgbTx to the slave and return
**		the bytes read from the slave in rgbRx
*/
void
OledPutBuffer(int cb, uint8_t * rgbTx)
	{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	int		ib;
	uint8_t	bTmp;

	/* Write/Read the data
	*/
	for (ib = 0; ib < cb; ib++) {
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
 8000c0a:	e00c      	b.n	8000c26 <OledPutBuffer+0x2a>

	    HAL_SPI_Transmit(&hspi1, rgbTx, 1, HAL_MAX_DELAY);
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	425b      	negs	r3, r3
 8000c10:	6839      	ldr	r1, [r7, #0]
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <OledPutBuffer+0x3c>)
 8000c14:	2201      	movs	r2, #1
 8000c16:	f001 f86d 	bl	8001cf4 <HAL_SPI_Transmit>
	    rgbTx++;
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	603b      	str	r3, [r7, #0]
	for (ib = 0; ib < cb; ib++) {
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3301      	adds	r3, #1
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fa      	ldr	r2, [r7, #12]
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	dbee      	blt.n	8000c0c <OledPutBuffer+0x10>
		//bTmp = spiCon.transfer(*rgbTx++);

	}

}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b004      	add	sp, #16
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000378 	.word	0x20000378

08000c3c <Spi2PutByte>:
**	Description:
**		Write/Read a byte on SPI port 2
*/
uint8_t
Spi2PutByte(uint8_t bVal)
	{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	0002      	movs	r2, r0
 8000c44:	1dfb      	adds	r3, r7, #7
 8000c46:	701a      	strb	r2, [r3, #0]
	uint8_t	bRx;

    HAL_SPI_Transmit(&hspi1, &bVal, 1, HAL_MAX_DELAY);
 8000c48:	2301      	movs	r3, #1
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	1df9      	adds	r1, r7, #7
 8000c4e:	4804      	ldr	r0, [pc, #16]	; (8000c60 <Spi2PutByte+0x24>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	f001 f84f 	bl	8001cf4 <HAL_SPI_Transmit>

	// bRx = spiCon.transfer(bVal);
	
	//return bRx;
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b002      	add	sp, #8
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000378 	.word	0x20000378

08000c64 <digitalWrite>:

void digitalWrite(uint16_t mypin, unsigned char cLevel){
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	0002      	movs	r2, r0
 8000c6c:	1dbb      	adds	r3, r7, #6
 8000c6e:	801a      	strh	r2, [r3, #0]
 8000c70:	1d7b      	adds	r3, r7, #5
 8000c72:	1c0a      	adds	r2, r1, #0
 8000c74:	701a      	strb	r2, [r3, #0]
	
	
	HAL_GPIO_WritePin(GPIOA, mypin, cLevel);
 8000c76:	1d7b      	adds	r3, r7, #5
 8000c78:	781a      	ldrb	r2, [r3, #0]
 8000c7a:	1dbb      	adds	r3, r7, #6
 8000c7c:	8819      	ldrh	r1, [r3, #0]
 8000c7e:	2390      	movs	r3, #144	; 0x90
 8000c80:	05db      	lsls	r3, r3, #23
 8000c82:	0018      	movs	r0, r3
 8000c84:	f000 fedb 	bl	8001a3e <HAL_GPIO_WritePin>

	
}
 8000c88:	46c0      	nop			; (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <OledMoveTo>:
**		Set the current graphics drawing position.
*/

void
OledMoveTo(int xco, int yco)
	{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]

	/* Clamp the specified coordinates to the display surface
	*/
	xco = OledClampXco(xco);
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f000 f8ed 	bl	8000e7c <OledClampXco>
 8000ca2:	0003      	movs	r3, r0
 8000ca4:	607b      	str	r3, [r7, #4]
	yco = OledClampYco(yco);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 f8fa 	bl	8000ea2 <OledClampYco>
 8000cae:	0003      	movs	r3, r0
 8000cb0:	603b      	str	r3, [r7, #0]

	/* Save the current position.
	*/
	xcoOledCur = xco;
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <OledMoveTo+0x58>)
 8000cb4:	687a      	ldr	r2, [r7, #4]
 8000cb6:	601a      	str	r2, [r3, #0]
	ycoOledCur = yco;
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <OledMoveTo+0x5c>)
 8000cba:	683a      	ldr	r2, [r7, #0]
 8000cbc:	601a      	str	r2, [r3, #0]

	/* Compute the display access parameters corresponding to
	** the specified position.
	*/
	pbOledCur = &rgbOledBmp[((yco/8) * ccolOledMax) + xco];
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	da00      	bge.n	8000cc6 <OledMoveTo+0x36>
 8000cc4:	3307      	adds	r3, #7
 8000cc6:	10db      	asrs	r3, r3, #3
 8000cc8:	01da      	lsls	r2, r3, #7
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	18d2      	adds	r2, r2, r3
 8000cce:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <OledMoveTo+0x60>)
 8000cd0:	18d2      	adds	r2, r2, r3
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <OledMoveTo+0x64>)
 8000cd4:	601a      	str	r2, [r3, #0]
	bnOledCur = yco & 7;
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	2207      	movs	r2, #7
 8000cda:	401a      	ands	r2, r3
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <OledMoveTo+0x68>)
 8000cde:	601a      	str	r2, [r3, #0]

}
 8000ce0:	46c0      	nop			; (mov r8, r8)
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	20000144 	.word	0x20000144
 8000cec:	20000148 	.word	0x20000148
 8000cf0:	20000170 	.word	0x20000170
 8000cf4:	2000014c 	.word	0x2000014c
 8000cf8:	20000150 	.word	0x20000150

08000cfc <OledSetDrawMode>:
**		Set the specified mode as the current drawing mode.
*/

void
OledSetDrawMode(int mod)
	{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]

	modOledCur = mod;
 8000d04:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <OledSetDrawMode+0x6c>)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	601a      	str	r2, [r3, #0]

	switch(mod) {
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2b03      	cmp	r3, #3
 8000d0e:	d01b      	beq.n	8000d48 <OledSetDrawMode+0x4c>
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	2b03      	cmp	r3, #3
 8000d14:	dc1c      	bgt.n	8000d50 <OledSetDrawMode+0x54>
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d011      	beq.n	8000d40 <OledSetDrawMode+0x44>
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2b02      	cmp	r3, #2
 8000d20:	dc16      	bgt.n	8000d50 <OledSetDrawMode+0x54>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <OledSetDrawMode+0x34>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b01      	cmp	r3, #1
 8000d2c:	d004      	beq.n	8000d38 <OledSetDrawMode+0x3c>
 8000d2e:	e00f      	b.n	8000d50 <OledSetDrawMode+0x54>
		case	modOledSet:
			pfnDoRop = OledRopSet;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <OledSetDrawMode+0x70>)
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <OledSetDrawMode+0x74>)
 8000d34:	601a      	str	r2, [r3, #0]
			break;
 8000d36:	e012      	b.n	8000d5e <OledSetDrawMode+0x62>

		case	modOledOr:
			pfnDoRop = OledRopOr;
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <OledSetDrawMode+0x70>)
 8000d3a:	4a0e      	ldr	r2, [pc, #56]	; (8000d74 <OledSetDrawMode+0x78>)
 8000d3c:	601a      	str	r2, [r3, #0]
			break;
 8000d3e:	e00e      	b.n	8000d5e <OledSetDrawMode+0x62>

		case	modOledAnd:
			pfnDoRop = OledRopAnd;
 8000d40:	4b0a      	ldr	r3, [pc, #40]	; (8000d6c <OledSetDrawMode+0x70>)
 8000d42:	4a0d      	ldr	r2, [pc, #52]	; (8000d78 <OledSetDrawMode+0x7c>)
 8000d44:	601a      	str	r2, [r3, #0]
			break;
 8000d46:	e00a      	b.n	8000d5e <OledSetDrawMode+0x62>

		case	modOledXor:
			pfnDoRop = OledRopXor;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <OledSetDrawMode+0x70>)
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <OledSetDrawMode+0x80>)
 8000d4c:	601a      	str	r2, [r3, #0]
			break;
 8000d4e:	e006      	b.n	8000d5e <OledSetDrawMode+0x62>

		default:
			modOledCur = modOledSet;
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <OledSetDrawMode+0x6c>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
			pfnDoRop = OledRopSet;
 8000d56:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <OledSetDrawMode+0x70>)
 8000d58:	4a05      	ldr	r2, [pc, #20]	; (8000d70 <OledSetDrawMode+0x74>)
 8000d5a:	601a      	str	r2, [r3, #0]
	}

}
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	46bd      	mov	sp, r7
 8000d62:	b002      	add	sp, #8
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	46c0      	nop			; (mov r8, r8)
 8000d68:	20000374 	.word	0x20000374
 8000d6c:	20000370 	.word	0x20000370
 8000d70:	08000d81 	.word	0x08000d81
 8000d74:	08000dcf 	.word	0x08000dcf
 8000d78:	08000e09 	.word	0x08000e09
 8000d7c:	08000e43 	.word	0x08000e43

08000d80 <OledRopSet>:
**
*/

uint8_t
OledRopSet(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	0004      	movs	r4, r0
 8000d88:	0008      	movs	r0, r1
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	1dfb      	adds	r3, r7, #7
 8000d8e:	1c22      	adds	r2, r4, #0
 8000d90:	701a      	strb	r2, [r3, #0]
 8000d92:	1dbb      	adds	r3, r7, #6
 8000d94:	1c02      	adds	r2, r0, #0
 8000d96:	701a      	strb	r2, [r3, #0]
 8000d98:	1d7b      	adds	r3, r7, #5
 8000d9a:	1c0a      	adds	r2, r1, #0
 8000d9c:	701a      	strb	r2, [r3, #0]

	return (bDsp & ~mskPix) | (bPix & mskPix);
 8000d9e:	1d7b      	adds	r3, r7, #5
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	b25b      	sxtb	r3, r3
 8000da4:	43db      	mvns	r3, r3
 8000da6:	b25b      	sxtb	r3, r3
 8000da8:	1dba      	adds	r2, r7, #6
 8000daa:	7812      	ldrb	r2, [r2, #0]
 8000dac:	b252      	sxtb	r2, r2
 8000dae:	4013      	ands	r3, r2
 8000db0:	b25a      	sxtb	r2, r3
 8000db2:	1dfb      	adds	r3, r7, #7
 8000db4:	1d79      	adds	r1, r7, #5
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	7809      	ldrb	r1, [r1, #0]
 8000dba:	400b      	ands	r3, r1
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	b25b      	sxtb	r3, r3
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	b25b      	sxtb	r3, r3
 8000dc4:	b2db      	uxtb	r3, r3

}
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b003      	add	sp, #12
 8000dcc:	bd90      	pop	{r4, r7, pc}

08000dce <OledRopOr>:
**
*/

uint8_t
OledRopOr(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8000dce:	b590      	push	{r4, r7, lr}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	0004      	movs	r4, r0
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	0011      	movs	r1, r2
 8000dda:	1dfb      	adds	r3, r7, #7
 8000ddc:	1c22      	adds	r2, r4, #0
 8000dde:	701a      	strb	r2, [r3, #0]
 8000de0:	1dbb      	adds	r3, r7, #6
 8000de2:	1c02      	adds	r2, r0, #0
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	1d7b      	adds	r3, r7, #5
 8000de8:	1c0a      	adds	r2, r1, #0
 8000dea:	701a      	strb	r2, [r3, #0]

	return bDsp | (bPix & mskPix);
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	1d7a      	adds	r2, r7, #5
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	7812      	ldrb	r2, [r2, #0]
 8000df4:	4013      	ands	r3, r2
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	1dbb      	adds	r3, r7, #6
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	b2db      	uxtb	r3, r3

}
 8000e00:	0018      	movs	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	b003      	add	sp, #12
 8000e06:	bd90      	pop	{r4, r7, pc}

08000e08 <OledRopAnd>:
**
*/

uint8_t
OledRopAnd(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8000e08:	b590      	push	{r4, r7, lr}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	0004      	movs	r4, r0
 8000e10:	0008      	movs	r0, r1
 8000e12:	0011      	movs	r1, r2
 8000e14:	1dfb      	adds	r3, r7, #7
 8000e16:	1c22      	adds	r2, r4, #0
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	1dbb      	adds	r3, r7, #6
 8000e1c:	1c02      	adds	r2, r0, #0
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	1d7b      	adds	r3, r7, #5
 8000e22:	1c0a      	adds	r2, r1, #0
 8000e24:	701a      	strb	r2, [r3, #0]

	return bDsp & (bPix & mskPix);
 8000e26:	1dfb      	adds	r3, r7, #7
 8000e28:	1d7a      	adds	r2, r7, #5
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	7812      	ldrb	r2, [r2, #0]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	1dba      	adds	r2, r7, #6
 8000e34:	7812      	ldrb	r2, [r2, #0]
 8000e36:	4013      	ands	r3, r2
 8000e38:	b2db      	uxtb	r3, r3

}
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b003      	add	sp, #12
 8000e40:	bd90      	pop	{r4, r7, pc}

08000e42 <OledRopXor>:
**
*/

uint8_t
OledRopXor(uint8_t bPix, uint8_t bDsp, uint8_t mskPix)
	{
 8000e42:	b590      	push	{r4, r7, lr}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	0004      	movs	r4, r0
 8000e4a:	0008      	movs	r0, r1
 8000e4c:	0011      	movs	r1, r2
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	1c22      	adds	r2, r4, #0
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	1dbb      	adds	r3, r7, #6
 8000e56:	1c02      	adds	r2, r0, #0
 8000e58:	701a      	strb	r2, [r3, #0]
 8000e5a:	1d7b      	adds	r3, r7, #5
 8000e5c:	1c0a      	adds	r2, r1, #0
 8000e5e:	701a      	strb	r2, [r3, #0]

	return bDsp ^ (bPix & mskPix);
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	1d7a      	adds	r2, r7, #5
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	7812      	ldrb	r2, [r2, #0]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	1dbb      	adds	r3, r7, #6
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4053      	eors	r3, r2
 8000e72:	b2db      	uxtb	r3, r3

}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b003      	add	sp, #12
 8000e7a:	bd90      	pop	{r4, r7, pc}

08000e7c <OledClampXco>:
**		This routine forces the x value to be on the display.
*/

int
OledClampXco(int xco)
	{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	if (xco < 0) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	da01      	bge.n	8000e8e <OledClampXco+0x12>
		xco = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
	}
	if (xco >= ccolOledMax) {
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b7f      	cmp	r3, #127	; 0x7f
 8000e92:	dd01      	ble.n	8000e98 <OledClampXco+0x1c>
		xco = ccolOledMax-1;
 8000e94:	237f      	movs	r3, #127	; 0x7f
 8000e96:	607b      	str	r3, [r7, #4]
	}

	return xco;
 8000e98:	687b      	ldr	r3, [r7, #4]

}
 8000e9a:	0018      	movs	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	b002      	add	sp, #8
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <OledClampYco>:
**		This routine forces the y value to be on the display.
*/

int
OledClampYco(int yco)
	{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
	if (yco < 0) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	da01      	bge.n	8000eb4 <OledClampYco+0x12>
		yco = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	607b      	str	r3, [r7, #4]
	}
	if (yco >= crowOledMax) {
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	2b1f      	cmp	r3, #31
 8000eb8:	dd01      	ble.n	8000ebe <OledClampYco+0x1c>
		yco = crowOledMax-1;
 8000eba:	231f      	movs	r3, #31
 8000ebc:	607b      	str	r3, [r7, #4]
	}

	return yco;
 8000ebe:	687b      	ldr	r3, [r7, #4]

}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b002      	add	sp, #8
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <Brincadeirinha>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Brincadeirinha (void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
	OledSetCursor(0,0);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f7ff fc76 	bl	80007c0 <OledSetCursor>
	OledPutChar('I');
 8000ed4:	2049      	movs	r0, #73	; 0x49
 8000ed6:	f7ff fcad 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000eda:	2032      	movs	r0, #50	; 0x32
 8000edc:	f000 fb4a 	bl	8001574 <HAL_Delay>
	OledPutChar('n');
 8000ee0:	206e      	movs	r0, #110	; 0x6e
 8000ee2:	f7ff fca7 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000ee6:	2032      	movs	r0, #50	; 0x32
 8000ee8:	f000 fb44 	bl	8001574 <HAL_Delay>
	OledPutChar('i');
 8000eec:	2069      	movs	r0, #105	; 0x69
 8000eee:	f7ff fca1 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000ef2:	2032      	movs	r0, #50	; 0x32
 8000ef4:	f000 fb3e 	bl	8001574 <HAL_Delay>
	OledPutChar('c');
 8000ef8:	2063      	movs	r0, #99	; 0x63
 8000efa:	f7ff fc9b 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000efe:	2032      	movs	r0, #50	; 0x32
 8000f00:	f000 fb38 	bl	8001574 <HAL_Delay>
	OledPutChar('i');
 8000f04:	2069      	movs	r0, #105	; 0x69
 8000f06:	f7ff fc95 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f0a:	2032      	movs	r0, #50	; 0x32
 8000f0c:	f000 fb32 	bl	8001574 <HAL_Delay>
	OledPutChar('a');
 8000f10:	2061      	movs	r0, #97	; 0x61
 8000f12:	f7ff fc8f 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f16:	2032      	movs	r0, #50	; 0x32
 8000f18:	f000 fb2c 	bl	8001574 <HAL_Delay>
	OledPutChar('n');
 8000f1c:	206e      	movs	r0, #110	; 0x6e
 8000f1e:	f7ff fc89 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f22:	2032      	movs	r0, #50	; 0x32
 8000f24:	f000 fb26 	bl	8001574 <HAL_Delay>
	OledPutChar('d');
 8000f28:	2064      	movs	r0, #100	; 0x64
 8000f2a:	f7ff fc83 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f2e:	2032      	movs	r0, #50	; 0x32
 8000f30:	f000 fb20 	bl	8001574 <HAL_Delay>
	OledPutChar('o');
 8000f34:	206f      	movs	r0, #111	; 0x6f
 8000f36:	f7ff fc7d 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f3a:	2032      	movs	r0, #50	; 0x32
 8000f3c:	f000 fb1a 	bl	8001574 <HAL_Delay>
	OledPutChar(':');
 8000f40:	203a      	movs	r0, #58	; 0x3a
 8000f42:	f7ff fc77 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f46:	2032      	movs	r0, #50	; 0x32
 8000f48:	f000 fb14 	bl	8001574 <HAL_Delay>
	OledSetCursor(0,2);
 8000f4c:	2102      	movs	r1, #2
 8000f4e:	2000      	movs	r0, #0
 8000f50:	f7ff fc36 	bl	80007c0 <OledSetCursor>
	OledPutChar('D');
 8000f54:	2044      	movs	r0, #68	; 0x44
 8000f56:	f7ff fc6d 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f5a:	2032      	movs	r0, #50	; 0x32
 8000f5c:	f000 fb0a 	bl	8001574 <HAL_Delay>
	OledPutChar('e');
 8000f60:	2065      	movs	r0, #101	; 0x65
 8000f62:	f7ff fc67 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f66:	2032      	movs	r0, #50	; 0x32
 8000f68:	f000 fb04 	bl	8001574 <HAL_Delay>
	OledPutChar('d');
 8000f6c:	2064      	movs	r0, #100	; 0x64
 8000f6e:	f7ff fc61 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f72:	2032      	movs	r0, #50	; 0x32
 8000f74:	f000 fafe 	bl	8001574 <HAL_Delay>
	OledPutChar('e');
 8000f78:	2065      	movs	r0, #101	; 0x65
 8000f7a:	f7ff fc5b 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f7e:	2032      	movs	r0, #50	; 0x32
 8000f80:	f000 faf8 	bl	8001574 <HAL_Delay>
	OledPutChar('l');
 8000f84:	206c      	movs	r0, #108	; 0x6c
 8000f86:	f7ff fc55 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f8a:	2032      	movs	r0, #50	; 0x32
 8000f8c:	f000 faf2 	bl	8001574 <HAL_Delay>
	OledPutChar('M');
 8000f90:	204d      	movs	r0, #77	; 0x4d
 8000f92:	f7ff fc4f 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000f96:	2032      	movs	r0, #50	; 0x32
 8000f98:	f000 faec 	bl	8001574 <HAL_Delay>
	OledPutChar('u');
 8000f9c:	2075      	movs	r0, #117	; 0x75
 8000f9e:	f7ff fc49 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000fa2:	2032      	movs	r0, #50	; 0x32
 8000fa4:	f000 fae6 	bl	8001574 <HAL_Delay>
	OledPutChar('s');
 8000fa8:	2073      	movs	r0, #115	; 0x73
 8000faa:	f7ff fc43 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000fae:	2032      	movs	r0, #50	; 0x32
 8000fb0:	f000 fae0 	bl	8001574 <HAL_Delay>
	OledPutChar('i');
 8000fb4:	2069      	movs	r0, #105	; 0x69
 8000fb6:	f7ff fc3d 	bl	8000834 <OledPutChar>
	HAL_Delay(50);
 8000fba:	2032      	movs	r0, #50	; 0x32
 8000fbc:	f000 fada 	bl	8001574 <HAL_Delay>
	OledPutChar('c');
 8000fc0:	2063      	movs	r0, #99	; 0x63
 8000fc2:	f7ff fc37 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8000fc6:	23fa      	movs	r3, #250	; 0xfa
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	0018      	movs	r0, r3
 8000fcc:	f000 fad2 	bl	8001574 <HAL_Delay>
	OledPutChar('.');
 8000fd0:	202e      	movs	r0, #46	; 0x2e
 8000fd2:	f7ff fc2f 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8000fd6:	23fa      	movs	r3, #250	; 0xfa
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 faca 	bl	8001574 <HAL_Delay>
	OledPutChar('.');
 8000fe0:	202e      	movs	r0, #46	; 0x2e
 8000fe2:	f7ff fc27 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8000fe6:	23fa      	movs	r3, #250	; 0xfa
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	0018      	movs	r0, r3
 8000fec:	f000 fac2 	bl	8001574 <HAL_Delay>
	OledPutChar('.');
 8000ff0:	202e      	movs	r0, #46	; 0x2e
 8000ff2:	f7ff fc1f 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8000ff6:	23fa      	movs	r3, #250	; 0xfa
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f000 faba 	bl	8001574 <HAL_Delay>
	OledSetCursor(10,2);
 8001000:	2102      	movs	r1, #2
 8001002:	200a      	movs	r0, #10
 8001004:	f7ff fbdc 	bl	80007c0 <OledSetCursor>
	OledPutString("   ");
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <Brincadeirinha+0x19c>)
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff fc2c 	bl	8000868 <OledPutString>
	OledSetCursor(10,2);
 8001010:	2102      	movs	r1, #2
 8001012:	200a      	movs	r0, #10
 8001014:	f7ff fbd4 	bl	80007c0 <OledSetCursor>
	HAL_Delay(1000);
 8001018:	23fa      	movs	r3, #250	; 0xfa
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	0018      	movs	r0, r3
 800101e:	f000 faa9 	bl	8001574 <HAL_Delay>
	OledPutChar('.');
 8001022:	202e      	movs	r0, #46	; 0x2e
 8001024:	f7ff fc06 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8001028:	23fa      	movs	r3, #250	; 0xfa
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	0018      	movs	r0, r3
 800102e:	f000 faa1 	bl	8001574 <HAL_Delay>
	OledPutChar('.');
 8001032:	202e      	movs	r0, #46	; 0x2e
 8001034:	f7ff fbfe 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8001038:	23fa      	movs	r3, #250	; 0xfa
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	0018      	movs	r0, r3
 800103e:	f000 fa99 	bl	8001574 <HAL_Delay>
	OledPutChar('.');
 8001042:	202e      	movs	r0, #46	; 0x2e
 8001044:	f7ff fbf6 	bl	8000834 <OledPutChar>
	HAL_Delay(1000);
 8001048:	23fa      	movs	r3, #250	; 0xfa
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	0018      	movs	r0, r3
 800104e:	f000 fa91 	bl	8001574 <HAL_Delay>
	OledClear();
 8001052:	f7ff fd75 	bl	8000b40 <OledClear>
	OledSetCursor(0,0);
 8001056:	2100      	movs	r1, #0
 8001058:	2000      	movs	r0, #0
 800105a:	f7ff fbb1 	bl	80007c0 <OledSetCursor>
}
 800105e:	46c0      	nop			; (mov r8, r8)
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	08002bfc 	.word	0x08002bfc

08001068 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106c:	f000 fa1e 	bl	80014ac <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 f884 	bl	800117c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001074:	f000 f852 	bl	800111c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8001078:	f000 f812 	bl	80010a0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  OledInit();
 800107c:	f7ff fc8e 	bl	800099c <OledInit>
  OledClear();
 8001080:	f7ff fd5e 	bl	8000b40 <OledClear>
  OledSetCursor(0,0);
 8001084:	2100      	movs	r1, #0
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fb9a 	bl	80007c0 <OledSetCursor>

  Brincadeirinha();
 800108c:	f7ff ff1c 	bl	8000ec8 <Brincadeirinha>

  DF_Init(16);
 8001090:	2010      	movs	r0, #16
 8001092:	f7ff fa35 	bl	8000500 <DF_Init>
  DF_PlayFromStart();
 8001096:	f7ff fa09 	bl	80004ac <DF_PlayFromStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Check_Key();
 800109a:	f7ff fb25 	bl	80006e8 <Check_Key>
 800109e:	e7fc      	b.n	800109a <main+0x32>

080010a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <MX_SPI1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <MX_SPI1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ac:	2282      	movs	r2, #130	; 0x82
 80010ae:	0052      	lsls	r2, r2, #1
 80010b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <MX_SPI1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ba:	22e0      	movs	r2, #224	; 0xe0
 80010bc:	00d2      	lsls	r2, r2, #3
 80010be:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <MX_SPI1_Init+0x74>)
 80010c2:	2202      	movs	r2, #2
 80010c4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_SPI1_Init+0x74>)
 80010c8:	2201      	movs	r2, #1
 80010ca:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ce:	2280      	movs	r2, #128	; 0x80
 80010d0:	0092      	lsls	r2, r2, #2
 80010d2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <MX_SPI1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <MX_SPI1_Init+0x74>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010e0:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <MX_SPI1_Init+0x74>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010e6:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <MX_SPI1_Init+0x74>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_SPI1_Init+0x74>)
 80010ee:	2207      	movs	r2, #7
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <MX_SPI1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <MX_SPI1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010fe:	4b05      	ldr	r3, [pc, #20]	; (8001114 <MX_SPI1_Init+0x74>)
 8001100:	0018      	movs	r0, r3
 8001102:	f000 fd3f 	bl	8001b84 <HAL_SPI_Init>
 8001106:	1e03      	subs	r3, r0, #0
 8001108:	d001      	beq.n	800110e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f8ad 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000378 	.word	0x20000378
 8001118:	40013000 	.word	0x40013000

0800111c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001122:	4a15      	ldr	r2, [pc, #84]	; (8001178 <MX_USART1_UART_Init+0x5c>)
 8001124:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001128:	2296      	movs	r2, #150	; 0x96
 800112a:	0192      	lsls	r2, r2, #6
 800112c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800112e:	4b11      	ldr	r3, [pc, #68]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800113a:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_USART1_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001142:	220c      	movs	r2, #12
 8001144:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800114c:	4b09      	ldr	r3, [pc, #36]	; (8001174 <MX_USART1_UART_Init+0x58>)
 800114e:	2200      	movs	r2, #0
 8001150:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001154:	2200      	movs	r2, #0
 8001156:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_USART1_UART_Init+0x58>)
 800115a:	2200      	movs	r2, #0
 800115c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800115e:	4b05      	ldr	r3, [pc, #20]	; (8001174 <MX_USART1_UART_Init+0x58>)
 8001160:	0018      	movs	r0, r3
 8001162:	f001 f895 	bl	8002290 <HAL_UART_Init>
 8001166:	1e03      	subs	r3, r0, #0
 8001168:	d001      	beq.n	800116e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800116a:	f000 f87d 	bl	8001268 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200003dc 	.word	0x200003dc
 8001178:	40013800 	.word	0x40013800

0800117c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	b089      	sub	sp, #36	; 0x24
 8001180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	240c      	movs	r4, #12
 8001184:	193b      	adds	r3, r7, r4
 8001186:	0018      	movs	r0, r3
 8001188:	2314      	movs	r3, #20
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f001 fcbd 	bl	8002b0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001192:	4b33      	ldr	r3, [pc, #204]	; (8001260 <MX_GPIO_Init+0xe4>)
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <MX_GPIO_Init+0xe4>)
 8001198:	2180      	movs	r1, #128	; 0x80
 800119a:	03c9      	lsls	r1, r1, #15
 800119c:	430a      	orrs	r2, r1
 800119e:	615a      	str	r2, [r3, #20]
 80011a0:	4b2f      	ldr	r3, [pc, #188]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011a2:	695a      	ldr	r2, [r3, #20]
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	03db      	lsls	r3, r3, #15
 80011a8:	4013      	ands	r3, r2
 80011aa:	60bb      	str	r3, [r7, #8]
 80011ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ae:	4b2c      	ldr	r3, [pc, #176]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011b0:	695a      	ldr	r2, [r3, #20]
 80011b2:	4b2b      	ldr	r3, [pc, #172]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	0289      	lsls	r1, r1, #10
 80011b8:	430a      	orrs	r2, r1
 80011ba:	615a      	str	r2, [r3, #20]
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011be:	695a      	ldr	r2, [r3, #20]
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	029b      	lsls	r3, r3, #10
 80011c4:	4013      	ands	r3, r2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ca:	4b25      	ldr	r3, [pc, #148]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	4b24      	ldr	r3, [pc, #144]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011d0:	2180      	movs	r1, #128	; 0x80
 80011d2:	02c9      	lsls	r1, r1, #11
 80011d4:	430a      	orrs	r2, r1
 80011d6:	615a      	str	r2, [r3, #20]
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <MX_GPIO_Init+0xe4>)
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	02db      	lsls	r3, r3, #11
 80011e0:	4013      	ands	r3, r2
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 80011e6:	2390      	movs	r3, #144	; 0x90
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	2200      	movs	r2, #0
 80011ec:	2107      	movs	r1, #7
 80011ee:	0018      	movs	r0, r3
 80011f0:	f000 fc25 	bl	8001a3e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	2207      	movs	r2, #7
 80011f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fa:	193b      	adds	r3, r7, r4
 80011fc:	2201      	movs	r2, #1
 80011fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	193b      	adds	r3, r7, r4
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	193b      	adds	r3, r7, r4
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120c:	193a      	adds	r2, r7, r4
 800120e:	2390      	movs	r3, #144	; 0x90
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	0011      	movs	r1, r2
 8001214:	0018      	movs	r0, r3
 8001216:	f000 fa85 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6;
 800121a:	193b      	adds	r3, r7, r4
 800121c:	2258      	movs	r2, #88	; 0x58
 800121e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	193b      	adds	r3, r7, r4
 8001222:	2200      	movs	r2, #0
 8001224:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001226:	193b      	adds	r3, r7, r4
 8001228:	2202      	movs	r2, #2
 800122a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	193a      	adds	r2, r7, r4
 800122e:	2390      	movs	r3, #144	; 0x90
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	0011      	movs	r1, r2
 8001234:	0018      	movs	r0, r3
 8001236:	f000 fa75 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800123a:	193b      	adds	r3, r7, r4
 800123c:	2202      	movs	r2, #2
 800123e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001240:	193b      	adds	r3, r7, r4
 8001242:	2200      	movs	r2, #0
 8001244:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001246:	193b      	adds	r3, r7, r4
 8001248:	2202      	movs	r2, #2
 800124a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124c:	193b      	adds	r3, r7, r4
 800124e:	4a05      	ldr	r2, [pc, #20]	; (8001264 <MX_GPIO_Init+0xe8>)
 8001250:	0019      	movs	r1, r3
 8001252:	0010      	movs	r0, r2
 8001254:	f000 fa66 	bl	8001724 <HAL_GPIO_Init>

}
 8001258:	46c0      	nop			; (mov r8, r8)
 800125a:	46bd      	mov	sp, r7
 800125c:	b009      	add	sp, #36	; 0x24
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	40021000 	.word	0x40021000
 8001264:	48000400 	.word	0x48000400

08001268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800126c:	b672      	cpsid	i
}
 800126e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001270:	e7fe      	b.n	8001270 <Error_Handler+0x8>
	...

08001274 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127a:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_MspInit+0x44>)
 800127c:	699a      	ldr	r2, [r3, #24]
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <HAL_MspInit+0x44>)
 8001280:	2101      	movs	r1, #1
 8001282:	430a      	orrs	r2, r1
 8001284:	619a      	str	r2, [r3, #24]
 8001286:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <HAL_MspInit+0x44>)
 8001288:	699b      	ldr	r3, [r3, #24]
 800128a:	2201      	movs	r2, #1
 800128c:	4013      	ands	r3, r2
 800128e:	607b      	str	r3, [r7, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001292:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_MspInit+0x44>)
 8001294:	69da      	ldr	r2, [r3, #28]
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_MspInit+0x44>)
 8001298:	2180      	movs	r1, #128	; 0x80
 800129a:	0549      	lsls	r1, r1, #21
 800129c:	430a      	orrs	r2, r1
 800129e:	61da      	str	r2, [r3, #28]
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_MspInit+0x44>)
 80012a2:	69da      	ldr	r2, [r3, #28]
 80012a4:	2380      	movs	r3, #128	; 0x80
 80012a6:	055b      	lsls	r3, r3, #21
 80012a8:	4013      	ands	r3, r2
 80012aa:	603b      	str	r3, [r7, #0]
 80012ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	46c0      	nop			; (mov r8, r8)
 80012b0:	46bd      	mov	sp, r7
 80012b2:	b002      	add	sp, #8
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	46c0      	nop			; (mov r8, r8)
 80012b8:	40021000 	.word	0x40021000

080012bc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012bc:	b590      	push	{r4, r7, lr}
 80012be:	b08b      	sub	sp, #44	; 0x2c
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	2414      	movs	r4, #20
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	0018      	movs	r0, r3
 80012ca:	2314      	movs	r3, #20
 80012cc:	001a      	movs	r2, r3
 80012ce:	2100      	movs	r1, #0
 80012d0:	f001 fc1c 	bl	8002b0c <memset>
  if(hspi->Instance==SPI1)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_SPI_MspInit+0x90>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d132      	bne.n	8001344 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_SPI_MspInit+0x94>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	4b1b      	ldr	r3, [pc, #108]	; (8001350 <HAL_SPI_MspInit+0x94>)
 80012e4:	2180      	movs	r1, #128	; 0x80
 80012e6:	0149      	lsls	r1, r1, #5
 80012e8:	430a      	orrs	r2, r1
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <HAL_SPI_MspInit+0x94>)
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	2380      	movs	r3, #128	; 0x80
 80012f2:	015b      	lsls	r3, r3, #5
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_SPI_MspInit+0x94>)
 80012fc:	695a      	ldr	r2, [r3, #20]
 80012fe:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_SPI_MspInit+0x94>)
 8001300:	2180      	movs	r1, #128	; 0x80
 8001302:	0289      	lsls	r1, r1, #10
 8001304:	430a      	orrs	r2, r1
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <HAL_SPI_MspInit+0x94>)
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	2380      	movs	r3, #128	; 0x80
 800130e:	029b      	lsls	r3, r3, #10
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001316:	0021      	movs	r1, r4
 8001318:	187b      	adds	r3, r7, r1
 800131a:	22a0      	movs	r2, #160	; 0xa0
 800131c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2202      	movs	r2, #2
 8001322:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2200      	movs	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2203      	movs	r2, #3
 800132e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2200      	movs	r2, #0
 8001334:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001336:	187a      	adds	r2, r7, r1
 8001338:	2390      	movs	r3, #144	; 0x90
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f000 f9f0 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001344:	46c0      	nop			; (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b00b      	add	sp, #44	; 0x2c
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	40013000 	.word	0x40013000
 8001350:	40021000 	.word	0x40021000

08001354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b08b      	sub	sp, #44	; 0x2c
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	2414      	movs	r4, #20
 800135e:	193b      	adds	r3, r7, r4
 8001360:	0018      	movs	r0, r3
 8001362:	2314      	movs	r3, #20
 8001364:	001a      	movs	r2, r3
 8001366:	2100      	movs	r1, #0
 8001368:	f001 fbd0 	bl	8002b0c <memset>
  if(huart->Instance==USART1)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a1d      	ldr	r2, [pc, #116]	; (80013e8 <HAL_UART_MspInit+0x94>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d133      	bne.n	80013de <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001376:	4b1d      	ldr	r3, [pc, #116]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <HAL_UART_MspInit+0x98>)
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	01c9      	lsls	r1, r1, #7
 8001380:	430a      	orrs	r2, r1
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	4b19      	ldr	r3, [pc, #100]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001386:	699a      	ldr	r2, [r3, #24]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	01db      	lsls	r3, r3, #7
 800138c:	4013      	ands	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001392:	4b16      	ldr	r3, [pc, #88]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_UART_MspInit+0x98>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	0289      	lsls	r1, r1, #10
 800139c:	430a      	orrs	r2, r1
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	4b12      	ldr	r3, [pc, #72]	; (80013ec <HAL_UART_MspInit+0x98>)
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	029b      	lsls	r3, r3, #10
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	22c0      	movs	r2, #192	; 0xc0
 80013b2:	00d2      	lsls	r2, r2, #3
 80013b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	0021      	movs	r1, r4
 80013b8:	187b      	adds	r3, r7, r1
 80013ba:	2202      	movs	r2, #2
 80013bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013c4:	187b      	adds	r3, r7, r1
 80013c6:	2203      	movs	r2, #3
 80013c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80013ca:	187b      	adds	r3, r7, r1
 80013cc:	2201      	movs	r2, #1
 80013ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d0:	187a      	adds	r2, r7, r1
 80013d2:	2390      	movs	r3, #144	; 0x90
 80013d4:	05db      	lsls	r3, r3, #23
 80013d6:	0011      	movs	r1, r2
 80013d8:	0018      	movs	r0, r3
 80013da:	f000 f9a3 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b00b      	add	sp, #44	; 0x2c
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	46c0      	nop			; (mov r8, r8)
 80013e8:	40013800 	.word	0x40013800
 80013ec:	40021000 	.word	0x40021000

080013f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <NMI_Handler+0x4>

080013f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f6:	b580      	push	{r7, lr}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler+0x4>

080013fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}

08001406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001414:	f000 f892 	bl	800153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001418:	46c0      	nop			; (mov r8, r8)
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001428:	4813      	ldr	r0, [pc, #76]	; (8001478 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800142a:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <LoopForever+0x6>)
    LDR R1, [R0]
 800142e:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8001430:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8001432:	4a13      	ldr	r2, [pc, #76]	; (8001480 <LoopForever+0xa>)
    CMP R1, R2
 8001434:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8001436:	d105      	bne.n	8001444 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8001438:	4812      	ldr	r0, [pc, #72]	; (8001484 <LoopForever+0xe>)
    LDR R1,=0x00000001
 800143a:	4913      	ldr	r1, [pc, #76]	; (8001488 <LoopForever+0x12>)
    STR R1, [R0]
 800143c:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 800143e:	4813      	ldr	r0, [pc, #76]	; (800148c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8001440:	4913      	ldr	r1, [pc, #76]	; (8001490 <LoopForever+0x1a>)
    STR R1, [R0]
 8001442:	6001      	str	r1, [r0, #0]

08001444 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <LoopForever+0x1e>)
  ldr r1, =_edata
 8001446:	4914      	ldr	r1, [pc, #80]	; (8001498 <LoopForever+0x22>)
  ldr r2, =_sidata
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <LoopForever+0x26>)
  movs r3, #0
 800144a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800144c:	e002      	b.n	8001454 <LoopCopyDataInit>

0800144e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001450:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001452:	3304      	adds	r3, #4

08001454 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001454:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001456:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001458:	d3f9      	bcc.n	800144e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800145a:	4a11      	ldr	r2, [pc, #68]	; (80014a0 <LoopForever+0x2a>)
  ldr r4, =_ebss
 800145c:	4c11      	ldr	r4, [pc, #68]	; (80014a4 <LoopForever+0x2e>)
  movs r3, #0
 800145e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001460:	e001      	b.n	8001466 <LoopFillZerobss>

08001462 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001462:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001464:	3204      	adds	r2, #4

08001466 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001466:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001468:	d3fb      	bcc.n	8001462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800146a:	f7ff ffd8 	bl	800141e <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800146e:	f001 fb0d 	bl	8002a8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001472:	f7ff fdf9 	bl	8001068 <main>

08001476 <LoopForever>:

LoopForever:
    b LoopForever
 8001476:	e7fe      	b.n	8001476 <LoopForever>
  ldr   r0, =_estack
 8001478:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 800147c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8001480:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8001484:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8001488:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 800148c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8001490:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8001494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001498:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800149c:	08002f98 	.word	0x08002f98
  ldr r2, =_sbss
 80014a0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014a4:	20000464 	.word	0x20000464

080014a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014a8:	e7fe      	b.n	80014a8 <ADC1_IRQHandler>
	...

080014ac <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <HAL_Init+0x24>)
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <HAL_Init+0x24>)
 80014b6:	2110      	movs	r1, #16
 80014b8:	430a      	orrs	r2, r1
 80014ba:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80014bc:	2003      	movs	r0, #3
 80014be:	f000 f809 	bl	80014d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014c2:	f7ff fed7 	bl	8001274 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	46c0      	nop			; (mov r8, r8)
 80014d0:	40022000 	.word	0x40022000

080014d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014d4:	b590      	push	{r4, r7, lr}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_InitTick+0x5c>)
 80014de:	681c      	ldr	r4, [r3, #0]
 80014e0:	4b14      	ldr	r3, [pc, #80]	; (8001534 <HAL_InitTick+0x60>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	0019      	movs	r1, r3
 80014e6:	23fa      	movs	r3, #250	; 0xfa
 80014e8:	0098      	lsls	r0, r3, #2
 80014ea:	f7fe fe0d 	bl	8000108 <__udivsi3>
 80014ee:	0003      	movs	r3, r0
 80014f0:	0019      	movs	r1, r3
 80014f2:	0020      	movs	r0, r4
 80014f4:	f7fe fe08 	bl	8000108 <__udivsi3>
 80014f8:	0003      	movs	r3, r0
 80014fa:	0018      	movs	r0, r3
 80014fc:	f000 f905 	bl	800170a <HAL_SYSTICK_Config>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d001      	beq.n	8001508 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	e00f      	b.n	8001528 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b03      	cmp	r3, #3
 800150c:	d80b      	bhi.n	8001526 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800150e:	6879      	ldr	r1, [r7, #4]
 8001510:	2301      	movs	r3, #1
 8001512:	425b      	negs	r3, r3
 8001514:	2200      	movs	r2, #0
 8001516:	0018      	movs	r0, r3
 8001518:	f000 f8e2 	bl	80016e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <HAL_InitTick+0x64>)
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001522:	2300      	movs	r3, #0
 8001524:	e000      	b.n	8001528 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b003      	add	sp, #12
 800152e:	bd90      	pop	{r4, r7, pc}
 8001530:	20000008 	.word	0x20000008
 8001534:	20000010 	.word	0x20000010
 8001538:	2000000c 	.word	0x2000000c

0800153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <HAL_IncTick+0x1c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	001a      	movs	r2, r3
 8001546:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x20>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	18d2      	adds	r2, r2, r3
 800154c:	4b03      	ldr	r3, [pc, #12]	; (800155c <HAL_IncTick+0x20>)
 800154e:	601a      	str	r2, [r3, #0]
}
 8001550:	46c0      	nop			; (mov r8, r8)
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	20000010 	.word	0x20000010
 800155c:	20000460 	.word	0x20000460

08001560 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  return uwTick;
 8001564:	4b02      	ldr	r3, [pc, #8]	; (8001570 <HAL_GetTick+0x10>)
 8001566:	681b      	ldr	r3, [r3, #0]
}
 8001568:	0018      	movs	r0, r3
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	46c0      	nop			; (mov r8, r8)
 8001570:	20000460 	.word	0x20000460

08001574 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800157c:	f7ff fff0 	bl	8001560 <HAL_GetTick>
 8001580:	0003      	movs	r3, r0
 8001582:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	3301      	adds	r3, #1
 800158c:	d005      	beq.n	800159a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800158e:	4b0a      	ldr	r3, [pc, #40]	; (80015b8 <HAL_Delay+0x44>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	001a      	movs	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	189b      	adds	r3, r3, r2
 8001598:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	f7ff ffe0 	bl	8001560 <HAL_GetTick>
 80015a0:	0002      	movs	r2, r0
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1ad3      	subs	r3, r2, r3
 80015a6:	68fa      	ldr	r2, [r7, #12]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d8f7      	bhi.n	800159c <HAL_Delay+0x28>
  {
  }
}
 80015ac:	46c0      	nop			; (mov r8, r8)
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			; (mov r8, r8)
 80015b8:	20000010 	.word	0x20000010

080015bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015bc:	b590      	push	{r4, r7, lr}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	0002      	movs	r2, r0
 80015c4:	6039      	str	r1, [r7, #0]
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015ca:	1dfb      	adds	r3, r7, #7
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b7f      	cmp	r3, #127	; 0x7f
 80015d0:	d828      	bhi.n	8001624 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015d2:	4a2f      	ldr	r2, [pc, #188]	; (8001690 <__NVIC_SetPriority+0xd4>)
 80015d4:	1dfb      	adds	r3, r7, #7
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	089b      	lsrs	r3, r3, #2
 80015dc:	33c0      	adds	r3, #192	; 0xc0
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	589b      	ldr	r3, [r3, r2]
 80015e2:	1dfa      	adds	r2, r7, #7
 80015e4:	7812      	ldrb	r2, [r2, #0]
 80015e6:	0011      	movs	r1, r2
 80015e8:	2203      	movs	r2, #3
 80015ea:	400a      	ands	r2, r1
 80015ec:	00d2      	lsls	r2, r2, #3
 80015ee:	21ff      	movs	r1, #255	; 0xff
 80015f0:	4091      	lsls	r1, r2
 80015f2:	000a      	movs	r2, r1
 80015f4:	43d2      	mvns	r2, r2
 80015f6:	401a      	ands	r2, r3
 80015f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	019b      	lsls	r3, r3, #6
 80015fe:	22ff      	movs	r2, #255	; 0xff
 8001600:	401a      	ands	r2, r3
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	0018      	movs	r0, r3
 8001608:	2303      	movs	r3, #3
 800160a:	4003      	ands	r3, r0
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001610:	481f      	ldr	r0, [pc, #124]	; (8001690 <__NVIC_SetPriority+0xd4>)
 8001612:	1dfb      	adds	r3, r7, #7
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	b25b      	sxtb	r3, r3
 8001618:	089b      	lsrs	r3, r3, #2
 800161a:	430a      	orrs	r2, r1
 800161c:	33c0      	adds	r3, #192	; 0xc0
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001622:	e031      	b.n	8001688 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001624:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <__NVIC_SetPriority+0xd8>)
 8001626:	1dfb      	adds	r3, r7, #7
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	0019      	movs	r1, r3
 800162c:	230f      	movs	r3, #15
 800162e:	400b      	ands	r3, r1
 8001630:	3b08      	subs	r3, #8
 8001632:	089b      	lsrs	r3, r3, #2
 8001634:	3306      	adds	r3, #6
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	18d3      	adds	r3, r2, r3
 800163a:	3304      	adds	r3, #4
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	1dfa      	adds	r2, r7, #7
 8001640:	7812      	ldrb	r2, [r2, #0]
 8001642:	0011      	movs	r1, r2
 8001644:	2203      	movs	r2, #3
 8001646:	400a      	ands	r2, r1
 8001648:	00d2      	lsls	r2, r2, #3
 800164a:	21ff      	movs	r1, #255	; 0xff
 800164c:	4091      	lsls	r1, r2
 800164e:	000a      	movs	r2, r1
 8001650:	43d2      	mvns	r2, r2
 8001652:	401a      	ands	r2, r3
 8001654:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	019b      	lsls	r3, r3, #6
 800165a:	22ff      	movs	r2, #255	; 0xff
 800165c:	401a      	ands	r2, r3
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	0018      	movs	r0, r3
 8001664:	2303      	movs	r3, #3
 8001666:	4003      	ands	r3, r0
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <__NVIC_SetPriority+0xd8>)
 800166e:	1dfb      	adds	r3, r7, #7
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	001c      	movs	r4, r3
 8001674:	230f      	movs	r3, #15
 8001676:	4023      	ands	r3, r4
 8001678:	3b08      	subs	r3, #8
 800167a:	089b      	lsrs	r3, r3, #2
 800167c:	430a      	orrs	r2, r1
 800167e:	3306      	adds	r3, #6
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	18c3      	adds	r3, r0, r3
 8001684:	3304      	adds	r3, #4
 8001686:	601a      	str	r2, [r3, #0]
}
 8001688:	46c0      	nop			; (mov r8, r8)
 800168a:	46bd      	mov	sp, r7
 800168c:	b003      	add	sp, #12
 800168e:	bd90      	pop	{r4, r7, pc}
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	1e5a      	subs	r2, r3, #1
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	045b      	lsls	r3, r3, #17
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d301      	bcc.n	80016b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ac:	2301      	movs	r3, #1
 80016ae:	e010      	b.n	80016d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <SysTick_Config+0x44>)
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	3a01      	subs	r2, #1
 80016b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b8:	2301      	movs	r3, #1
 80016ba:	425b      	negs	r3, r3
 80016bc:	2103      	movs	r1, #3
 80016be:	0018      	movs	r0, r3
 80016c0:	f7ff ff7c 	bl	80015bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x44>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x44>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b002      	add	sp, #8
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	46c0      	nop			; (mov r8, r8)
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60b9      	str	r1, [r7, #8]
 80016e8:	607a      	str	r2, [r7, #4]
 80016ea:	210f      	movs	r1, #15
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	1c02      	adds	r2, r0, #0
 80016f0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80016f2:	68ba      	ldr	r2, [r7, #8]
 80016f4:	187b      	adds	r3, r7, r1
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	0011      	movs	r1, r2
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff ff5d 	bl	80015bc <__NVIC_SetPriority>
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b004      	add	sp, #16
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	0018      	movs	r0, r3
 8001716:	f7ff ffbf 	bl	8001698 <SysTick_Config>
 800171a:	0003      	movs	r3, r0
}
 800171c:	0018      	movs	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	b002      	add	sp, #8
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b086      	sub	sp, #24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001732:	e14f      	b.n	80019d4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4091      	lsls	r1, r2
 800173e:	000a      	movs	r2, r1
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d100      	bne.n	800174c <HAL_GPIO_Init+0x28>
 800174a:	e140      	b.n	80019ce <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	2b02      	cmp	r3, #2
 8001762:	d130      	bne.n	80017c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179a:	2201      	movs	r2, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	2201      	movs	r2, #1
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d017      	beq.n	8001802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	4013      	ands	r3, r2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d123      	bne.n	8001856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	58d3      	ldr	r3, [r2, r3]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2207      	movs	r2, #7
 8001820:	4013      	ands	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2107      	movs	r1, #7
 800183a:	400b      	ands	r3, r1
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	6939      	ldr	r1, [r7, #16]
 8001854:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	43da      	mvns	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2203      	movs	r2, #3
 8001874:	401a      	ands	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	23c0      	movs	r3, #192	; 0xc0
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	4013      	ands	r3, r2
 8001894:	d100      	bne.n	8001898 <HAL_GPIO_Init+0x174>
 8001896:	e09a      	b.n	80019ce <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	4b54      	ldr	r3, [pc, #336]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 800189a:	699a      	ldr	r2, [r3, #24]
 800189c:	4b53      	ldr	r3, [pc, #332]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 800189e:	2101      	movs	r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	619a      	str	r2, [r3, #24]
 80018a4:	4b51      	ldr	r3, [pc, #324]	; (80019ec <HAL_GPIO_Init+0x2c8>)
 80018a6:	699b      	ldr	r3, [r3, #24]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b0:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_GPIO_Init+0x2cc>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	589b      	ldr	r3, [r3, r2]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	2203      	movs	r2, #3
 80018c2:	4013      	ands	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	409a      	lsls	r2, r3
 80018ca:	0013      	movs	r3, r2
 80018cc:	43da      	mvns	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	2390      	movs	r3, #144	; 0x90
 80018d8:	05db      	lsls	r3, r3, #23
 80018da:	429a      	cmp	r2, r3
 80018dc:	d013      	beq.n	8001906 <HAL_GPIO_Init+0x1e2>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a44      	ldr	r2, [pc, #272]	; (80019f4 <HAL_GPIO_Init+0x2d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d00d      	beq.n	8001902 <HAL_GPIO_Init+0x1de>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a43      	ldr	r2, [pc, #268]	; (80019f8 <HAL_GPIO_Init+0x2d4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d007      	beq.n	80018fe <HAL_GPIO_Init+0x1da>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a42      	ldr	r2, [pc, #264]	; (80019fc <HAL_GPIO_Init+0x2d8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_GPIO_Init+0x1d6>
 80018f6:	2303      	movs	r3, #3
 80018f8:	e006      	b.n	8001908 <HAL_GPIO_Init+0x1e4>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e004      	b.n	8001908 <HAL_GPIO_Init+0x1e4>
 80018fe:	2302      	movs	r3, #2
 8001900:	e002      	b.n	8001908 <HAL_GPIO_Init+0x1e4>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_GPIO_Init+0x1e4>
 8001906:	2300      	movs	r3, #0
 8001908:	697a      	ldr	r2, [r7, #20]
 800190a:	2103      	movs	r1, #3
 800190c:	400a      	ands	r2, r1
 800190e:	0092      	lsls	r2, r2, #2
 8001910:	4093      	lsls	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001918:	4935      	ldr	r1, [pc, #212]	; (80019f0 <HAL_GPIO_Init+0x2cc>)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	089b      	lsrs	r3, r3, #2
 800191e:	3302      	adds	r3, #2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	43da      	mvns	r2, r3
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	4013      	ands	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	2380      	movs	r3, #128	; 0x80
 800193c:	025b      	lsls	r3, r3, #9
 800193e:	4013      	ands	r3, r2
 8001940:	d003      	beq.n	800194a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	4313      	orrs	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001950:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43da      	mvns	r2, r3
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685a      	ldr	r2, [r3, #4]
 8001964:	2380      	movs	r3, #128	; 0x80
 8001966:	029b      	lsls	r3, r3, #10
 8001968:	4013      	ands	r3, r2
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001974:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 8001976:	693a      	ldr	r2, [r7, #16]
 8001978:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43da      	mvns	r2, r3
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	035b      	lsls	r3, r3, #13
 8001992:	4013      	ands	r3, r2
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43da      	mvns	r2, r3
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	2380      	movs	r3, #128	; 0x80
 80019ba:	039b      	lsls	r3, r3, #14
 80019bc:	4013      	ands	r3, r2
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019c8:	4b0d      	ldr	r3, [pc, #52]	; (8001a00 <HAL_GPIO_Init+0x2dc>)
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	40da      	lsrs	r2, r3
 80019dc:	1e13      	subs	r3, r2, #0
 80019de:	d000      	beq.n	80019e2 <HAL_GPIO_Init+0x2be>
 80019e0:	e6a8      	b.n	8001734 <HAL_GPIO_Init+0x10>
  } 
}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b006      	add	sp, #24
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40010000 	.word	0x40010000
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800
 80019fc:	48000c00 	.word	0x48000c00
 8001a00:	40010400 	.word	0x40010400

08001a04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	000a      	movs	r2, r1
 8001a0e:	1cbb      	adds	r3, r7, #2
 8001a10:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	1cba      	adds	r2, r7, #2
 8001a18:	8812      	ldrh	r2, [r2, #0]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	d004      	beq.n	8001a28 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1e:	230f      	movs	r3, #15
 8001a20:	18fb      	adds	r3, r7, r3
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
 8001a26:	e003      	b.n	8001a30 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a28:	230f      	movs	r3, #15
 8001a2a:	18fb      	adds	r3, r7, r3
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a30:	230f      	movs	r3, #15
 8001a32:	18fb      	adds	r3, r7, r3
 8001a34:	781b      	ldrb	r3, [r3, #0]
  }
 8001a36:	0018      	movs	r0, r3
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	b004      	add	sp, #16
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	0008      	movs	r0, r1
 8001a48:	0011      	movs	r1, r2
 8001a4a:	1cbb      	adds	r3, r7, #2
 8001a4c:	1c02      	adds	r2, r0, #0
 8001a4e:	801a      	strh	r2, [r3, #0]
 8001a50:	1c7b      	adds	r3, r7, #1
 8001a52:	1c0a      	adds	r2, r1, #0
 8001a54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a56:	1c7b      	adds	r3, r7, #1
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5e:	1cbb      	adds	r3, r7, #2
 8001a60:	881a      	ldrh	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a66:	e003      	b.n	8001a70 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a68:	1cbb      	adds	r3, r7, #2
 8001a6a:	881a      	ldrh	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b002      	add	sp, #8
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b08f      	sub	sp, #60	; 0x3c
 8001a7c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001a7e:	2314      	movs	r3, #20
 8001a80:	18fb      	adds	r3, r7, r3
 8001a82:	4a2c      	ldr	r2, [pc, #176]	; (8001b34 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a84:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a86:	c313      	stmia	r3!, {r0, r1, r4}
 8001a88:	6812      	ldr	r2, [r2, #0]
 8001a8a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	4a2a      	ldr	r2, [pc, #168]	; (8001b38 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a90:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001a92:	c313      	stmia	r3!, {r0, r1, r4}
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab4:	220c      	movs	r2, #12
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	2b04      	cmp	r3, #4
 8001aba:	d002      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x4a>
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d003      	beq.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x50>
 8001ac0:	e02f      	b.n	8001b22 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ac2:	4b1f      	ldr	r3, [pc, #124]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ac4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ac6:	e02f      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aca:	0c9b      	lsrs	r3, r3, #18
 8001acc:	220f      	movs	r2, #15
 8001ace:	4013      	ands	r3, r2
 8001ad0:	2214      	movs	r2, #20
 8001ad2:	18ba      	adds	r2, r7, r2
 8001ad4:	5cd3      	ldrb	r3, [r2, r3]
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001adc:	220f      	movs	r2, #15
 8001ade:	4013      	ands	r3, r2
 8001ae0:	1d3a      	adds	r2, r7, #4
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae8:	23c0      	movs	r3, #192	; 0xc0
 8001aea:	025b      	lsls	r3, r3, #9
 8001aec:	401a      	ands	r2, r3
 8001aee:	2380      	movs	r3, #128	; 0x80
 8001af0:	025b      	lsls	r3, r3, #9
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d109      	bne.n	8001b0a <HAL_RCC_GetSysClockFreq+0x92>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001af6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001af8:	4811      	ldr	r0, [pc, #68]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001afa:	f7fe fb05 	bl	8000108 <__udivsi3>
 8001afe:	0003      	movs	r3, r0
 8001b00:	001a      	movs	r2, r3
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	4353      	muls	r3, r2
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
 8001b08:	e008      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0xa4>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001b0a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b0c:	480c      	ldr	r0, [pc, #48]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b0e:	f7fe fafb 	bl	8000108 <__udivsi3>
 8001b12:	0003      	movs	r3, r0
 8001b14:	001a      	movs	r2, r3
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	4353      	muls	r3, r2
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b20:	e002      	b.n	8001b28 <HAL_RCC_GetSysClockFreq+0xb0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b22:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001b24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001b26:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b00f      	add	sp, #60	; 0x3c
 8001b30:	bd90      	pop	{r4, r7, pc}
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	08002c00 	.word	0x08002c00
 8001b38:	08002c10 	.word	0x08002c10
 8001b3c:	40021000 	.word	0x40021000
 8001b40:	007a1200 	.word	0x007a1200

08001b44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b48:	4b02      	ldr	r3, [pc, #8]	; (8001b54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
}
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000008 	.word	0x20000008

08001b58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001b5c:	f7ff fff2 	bl	8001b44 <HAL_RCC_GetHCLKFreq>
 8001b60:	0001      	movs	r1, r0
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	0a1b      	lsrs	r3, r3, #8
 8001b68:	2207      	movs	r2, #7
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	4a04      	ldr	r2, [pc, #16]	; (8001b80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	40d9      	lsrs	r1, r3
 8001b72:	000b      	movs	r3, r1
}    
 8001b74:	0018      	movs	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	08002f60 	.word	0x08002f60

08001b84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d101      	bne.n	8001b96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e0a8      	b.n	8001ce8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d109      	bne.n	8001bb2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2382      	movs	r3, #130	; 0x82
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d009      	beq.n	8001bbe <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	61da      	str	r2, [r3, #28]
 8001bb0:	e005      	b.n	8001bbe <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	225d      	movs	r2, #93	; 0x5d
 8001bc8:	5c9b      	ldrb	r3, [r3, r2]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	225c      	movs	r2, #92	; 0x5c
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	0018      	movs	r0, r3
 8001bdc:	f7ff fb6e 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	225d      	movs	r2, #93	; 0x5d
 8001be4:	2102      	movs	r1, #2
 8001be6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2140      	movs	r1, #64	; 0x40
 8001bf4:	438a      	bics	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	68da      	ldr	r2, [r3, #12]
 8001bfc:	23e0      	movs	r3, #224	; 0xe0
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d902      	bls.n	8001c0a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	e002      	b.n	8001c10 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	015b      	lsls	r3, r3, #5
 8001c0e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	23f0      	movs	r3, #240	; 0xf0
 8001c16:	011b      	lsls	r3, r3, #4
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d008      	beq.n	8001c2e <HAL_SPI_Init+0xaa>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	68da      	ldr	r2, [r3, #12]
 8001c20:	23e0      	movs	r3, #224	; 0xe0
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d002      	beq.n	8001c2e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	2382      	movs	r3, #130	; 0x82
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	401a      	ands	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6899      	ldr	r1, [r3, #8]
 8001c3c:	2384      	movs	r3, #132	; 0x84
 8001c3e:	021b      	lsls	r3, r3, #8
 8001c40:	400b      	ands	r3, r1
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	2102      	movs	r1, #2
 8001c4a:	400b      	ands	r3, r1
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	695b      	ldr	r3, [r3, #20]
 8001c52:	2101      	movs	r1, #1
 8001c54:	400b      	ands	r3, r1
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6999      	ldr	r1, [r3, #24]
 8001c5c:	2380      	movs	r3, #128	; 0x80
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	400b      	ands	r3, r1
 8001c62:	431a      	orrs	r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	69db      	ldr	r3, [r3, #28]
 8001c68:	2138      	movs	r1, #56	; 0x38
 8001c6a:	400b      	ands	r3, r1
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a1b      	ldr	r3, [r3, #32]
 8001c72:	2180      	movs	r1, #128	; 0x80
 8001c74:	400b      	ands	r3, r1
 8001c76:	431a      	orrs	r2, r3
 8001c78:	0011      	movs	r1, r2
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c7e:	2380      	movs	r3, #128	; 0x80
 8001c80:	019b      	lsls	r3, r3, #6
 8001c82:	401a      	ands	r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	0c1b      	lsrs	r3, r3, #16
 8001c92:	2204      	movs	r2, #4
 8001c94:	401a      	ands	r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c9a:	2110      	movs	r1, #16
 8001c9c:	400b      	ands	r3, r1
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ca4:	2108      	movs	r1, #8
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68d9      	ldr	r1, [r3, #12]
 8001cae:	23f0      	movs	r3, #240	; 0xf0
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	400b      	ands	r3, r1
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	0011      	movs	r1, r2
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	015b      	lsls	r3, r3, #5
 8001cbe:	401a      	ands	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	69da      	ldr	r2, [r3, #28]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4907      	ldr	r1, [pc, #28]	; (8001cf0 <HAL_SPI_Init+0x16c>)
 8001cd4:	400a      	ands	r2, r1
 8001cd6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	225d      	movs	r2, #93	; 0x5d
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b004      	add	sp, #16
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	fffff7ff 	.word	0xfffff7ff

08001cf4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b088      	sub	sp, #32
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	1dbb      	adds	r3, r7, #6
 8001d02:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d04:	231f      	movs	r3, #31
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	225c      	movs	r2, #92	; 0x5c
 8001d10:	5c9b      	ldrb	r3, [r3, r2]
 8001d12:	2b01      	cmp	r3, #1
 8001d14:	d101      	bne.n	8001d1a <HAL_SPI_Transmit+0x26>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e140      	b.n	8001f9c <HAL_SPI_Transmit+0x2a8>
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	225c      	movs	r2, #92	; 0x5c
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d22:	f7ff fc1d 	bl	8001560 <HAL_GetTick>
 8001d26:	0003      	movs	r3, r0
 8001d28:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001d2a:	2316      	movs	r3, #22
 8001d2c:	18fb      	adds	r3, r7, r3
 8001d2e:	1dba      	adds	r2, r7, #6
 8001d30:	8812      	ldrh	r2, [r2, #0]
 8001d32:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	225d      	movs	r2, #93	; 0x5d
 8001d38:	5c9b      	ldrb	r3, [r3, r2]
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d004      	beq.n	8001d4a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001d40:	231f      	movs	r3, #31
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	2202      	movs	r2, #2
 8001d46:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d48:	e11d      	b.n	8001f86 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d003      	beq.n	8001d58 <HAL_SPI_Transmit+0x64>
 8001d50:	1dbb      	adds	r3, r7, #6
 8001d52:	881b      	ldrh	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d104      	bne.n	8001d62 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001d58:	231f      	movs	r3, #31
 8001d5a:	18fb      	adds	r3, r7, r3
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	701a      	strb	r2, [r3, #0]
    goto error;
 8001d60:	e111      	b.n	8001f86 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	225d      	movs	r2, #93	; 0x5d
 8001d66:	2103      	movs	r1, #3
 8001d68:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	68ba      	ldr	r2, [r7, #8]
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1dba      	adds	r2, r7, #6
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	1dba      	adds	r2, r7, #6
 8001d82:	8812      	ldrh	r2, [r2, #0]
 8001d84:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2244      	movs	r2, #68	; 0x44
 8001d90:	2100      	movs	r1, #0
 8001d92:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2246      	movs	r2, #70	; 0x46
 8001d98:	2100      	movs	r1, #0
 8001d9a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	689a      	ldr	r2, [r3, #8]
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	021b      	lsls	r3, r3, #8
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d110      	bne.n	8001dd6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	438a      	bics	r2, r1
 8001dc2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2180      	movs	r1, #128	; 0x80
 8001dd0:	01c9      	lsls	r1, r1, #7
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2240      	movs	r2, #64	; 0x40
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b40      	cmp	r3, #64	; 0x40
 8001de2:	d007      	beq.n	8001df4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2140      	movs	r1, #64	; 0x40
 8001df0:	430a      	orrs	r2, r1
 8001df2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	23e0      	movs	r3, #224	; 0xe0
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d94e      	bls.n	8001e9e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <HAL_SPI_Transmit+0x11e>
 8001e08:	2316      	movs	r3, #22
 8001e0a:	18fb      	adds	r3, r7, r3
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d13f      	bne.n	8001e92 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e16:	881a      	ldrh	r2, [r3, #0]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e22:	1c9a      	adds	r2, r3, #2
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001e36:	e02c      	b.n	8001e92 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	4013      	ands	r3, r2
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d112      	bne.n	8001e6c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e4a:	881a      	ldrh	r2, [r3, #0]
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e56:	1c9a      	adds	r2, r3, #2
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	3b01      	subs	r3, #1
 8001e64:	b29a      	uxth	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001e6a:	e012      	b.n	8001e92 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e6c:	f7ff fb78 	bl	8001560 <HAL_GetTick>
 8001e70:	0002      	movs	r2, r0
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d802      	bhi.n	8001e82 <HAL_SPI_Transmit+0x18e>
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	d102      	bne.n	8001e88 <HAL_SPI_Transmit+0x194>
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d104      	bne.n	8001e92 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001e88:	231f      	movs	r3, #31
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	701a      	strb	r2, [r3, #0]
          goto error;
 8001e90:	e079      	b.n	8001f86 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1cd      	bne.n	8001e38 <HAL_SPI_Transmit+0x144>
 8001e9c:	e04f      	b.n	8001f3e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_SPI_Transmit+0x1bc>
 8001ea6:	2316      	movs	r3, #22
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d141      	bne.n	8001f34 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	330c      	adds	r3, #12
 8001eba:	7812      	ldrb	r2, [r2, #0]
 8001ebc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ec2:	1c5a      	adds	r2, r3, #1
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ecc:	b29b      	uxth	r3, r3
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8001ed6:	e02d      	b.n	8001f34 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d113      	bne.n	8001f0e <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	330c      	adds	r3, #12
 8001ef0:	7812      	ldrb	r2, [r2, #0]
 8001ef2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ef8:	1c5a      	adds	r2, r3, #1
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f02:	b29b      	uxth	r3, r3
 8001f04:	3b01      	subs	r3, #1
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f0c:	e012      	b.n	8001f34 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f0e:	f7ff fb27 	bl	8001560 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d802      	bhi.n	8001f24 <HAL_SPI_Transmit+0x230>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	3301      	adds	r3, #1
 8001f22:	d102      	bne.n	8001f2a <HAL_SPI_Transmit+0x236>
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d104      	bne.n	8001f34 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8001f2a:	231f      	movs	r3, #31
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	2203      	movs	r2, #3
 8001f30:	701a      	strb	r2, [r3, #0]
          goto error;
 8001f32:	e028      	b.n	8001f86 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1cc      	bne.n	8001ed8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	6839      	ldr	r1, [r7, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f95d 	bl	8002204 <SPI_EndRxTxTransaction>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d002      	beq.n	8001f54 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2220      	movs	r2, #32
 8001f52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10a      	bne.n	8001f72 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d004      	beq.n	8001f84 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	e000      	b.n	8001f86 <HAL_SPI_Transmit+0x292>
  }

error:
 8001f84:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	225d      	movs	r2, #93	; 0x5d
 8001f8a:	2101      	movs	r1, #1
 8001f8c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	225c      	movs	r2, #92	; 0x5c
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8001f96:	231f      	movs	r3, #31
 8001f98:	18fb      	adds	r3, r7, r3
 8001f9a:	781b      	ldrb	r3, [r3, #0]
}
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	b008      	add	sp, #32
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b088      	sub	sp, #32
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	60b9      	str	r1, [r7, #8]
 8001fae:	603b      	str	r3, [r7, #0]
 8001fb0:	1dfb      	adds	r3, r7, #7
 8001fb2:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001fb4:	f7ff fad4 	bl	8001560 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	18d3      	adds	r3, r2, r3
 8001fc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001fc4:	f7ff facc 	bl	8001560 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001fcc:	4b3a      	ldr	r3, [pc, #232]	; (80020b8 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	015b      	lsls	r3, r3, #5
 8001fd2:	0d1b      	lsrs	r3, r3, #20
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	4353      	muls	r3, r2
 8001fd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001fda:	e058      	b.n	800208e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	d055      	beq.n	800208e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001fe2:	f7ff fabd 	bl	8001560 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	69fa      	ldr	r2, [r7, #28]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d902      	bls.n	8001ff8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d142      	bne.n	800207e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	21e0      	movs	r1, #224	; 0xe0
 8002004:	438a      	bics	r2, r1
 8002006:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	2382      	movs	r3, #130	; 0x82
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	429a      	cmp	r2, r3
 8002012:	d113      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	021b      	lsls	r3, r3, #8
 800201c:	429a      	cmp	r2, r3
 800201e:	d005      	beq.n	800202c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689a      	ldr	r2, [r3, #8]
 8002024:	2380      	movs	r3, #128	; 0x80
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	429a      	cmp	r2, r3
 800202a:	d107      	bne.n	800203c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	681a      	ldr	r2, [r3, #0]
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2140      	movs	r1, #64	; 0x40
 8002038:	438a      	bics	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002040:	2380      	movs	r3, #128	; 0x80
 8002042:	019b      	lsls	r3, r3, #6
 8002044:	429a      	cmp	r2, r3
 8002046:	d110      	bne.n	800206a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	491a      	ldr	r1, [pc, #104]	; (80020bc <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2180      	movs	r1, #128	; 0x80
 8002064:	0189      	lsls	r1, r1, #6
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	225d      	movs	r2, #93	; 0x5d
 800206e:	2101      	movs	r1, #1
 8002070:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	225c      	movs	r2, #92	; 0x5c
 8002076:	2100      	movs	r1, #0
 8002078:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e017      	b.n	80020ae <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d101      	bne.n	8002088 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	3b01      	subs	r3, #1
 800208c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	68ba      	ldr	r2, [r7, #8]
 8002096:	4013      	ands	r3, r2
 8002098:	68ba      	ldr	r2, [r7, #8]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	425a      	negs	r2, r3
 800209e:	4153      	adcs	r3, r2
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	001a      	movs	r2, r3
 80020a4:	1dfb      	adds	r3, r7, #7
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d197      	bne.n	8001fdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	0018      	movs	r0, r3
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b008      	add	sp, #32
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	20000008 	.word	0x20000008
 80020bc:	ffffdfff 	.word	0xffffdfff

080020c0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b08a      	sub	sp, #40	; 0x28
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80020ce:	2317      	movs	r3, #23
 80020d0:	18fb      	adds	r3, r7, r3
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80020d6:	f7ff fa43 	bl	8001560 <HAL_GetTick>
 80020da:	0002      	movs	r2, r0
 80020dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020de:	1a9b      	subs	r3, r3, r2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	18d3      	adds	r3, r2, r3
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80020e6:	f7ff fa3b 	bl	8001560 <HAL_GetTick>
 80020ea:	0003      	movs	r3, r0
 80020ec:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	330c      	adds	r3, #12
 80020f4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80020f6:	4b41      	ldr	r3, [pc, #260]	; (80021fc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	0013      	movs	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	00da      	lsls	r2, r3, #3
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	0d1b      	lsrs	r3, r3, #20
 8002106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002108:	4353      	muls	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800210c:	e068      	b.n	80021e0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800210e:	68ba      	ldr	r2, [r7, #8]
 8002110:	23c0      	movs	r3, #192	; 0xc0
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	429a      	cmp	r2, r3
 8002116:	d10a      	bne.n	800212e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d107      	bne.n	800212e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	2117      	movs	r1, #23
 8002126:	187b      	adds	r3, r7, r1
 8002128:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800212a:	187b      	adds	r3, r7, r1
 800212c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	3301      	adds	r3, #1
 8002132:	d055      	beq.n	80021e0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002134:	f7ff fa14 	bl	8001560 <HAL_GetTick>
 8002138:	0002      	movs	r2, r0
 800213a:	6a3b      	ldr	r3, [r7, #32]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002140:	429a      	cmp	r2, r3
 8002142:	d902      	bls.n	800214a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002146:	2b00      	cmp	r3, #0
 8002148:	d142      	bne.n	80021d0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	21e0      	movs	r1, #224	; 0xe0
 8002156:	438a      	bics	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	2382      	movs	r3, #130	; 0x82
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	429a      	cmp	r2, r3
 8002164:	d113      	bne.n	800218e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	689a      	ldr	r2, [r3, #8]
 800216a:	2380      	movs	r3, #128	; 0x80
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	429a      	cmp	r2, r3
 8002170:	d005      	beq.n	800217e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	00db      	lsls	r3, r3, #3
 800217a:	429a      	cmp	r2, r3
 800217c:	d107      	bne.n	800218e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2140      	movs	r1, #64	; 0x40
 800218a:	438a      	bics	r2, r1
 800218c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002192:	2380      	movs	r3, #128	; 0x80
 8002194:	019b      	lsls	r3, r3, #6
 8002196:	429a      	cmp	r2, r3
 8002198:	d110      	bne.n	80021bc <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4916      	ldr	r1, [pc, #88]	; (8002200 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80021a6:	400a      	ands	r2, r1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0189      	lsls	r1, r1, #6
 80021b8:	430a      	orrs	r2, r1
 80021ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	225d      	movs	r2, #93	; 0x5d
 80021c0:	2101      	movs	r1, #1
 80021c2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	225c      	movs	r2, #92	; 0x5c
 80021c8:	2100      	movs	r1, #0
 80021ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e010      	b.n	80021f2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d101      	bne.n	80021da <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80021d6:	2300      	movs	r3, #0
 80021d8:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	3b01      	subs	r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4013      	ands	r3, r2
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d18e      	bne.n	800210e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	0018      	movs	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	b00a      	add	sp, #40	; 0x28
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	46c0      	nop			; (mov r8, r8)
 80021fc:	20000008 	.word	0x20000008
 8002200:	ffffdfff 	.word	0xffffdfff

08002204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
 800220a:	60f8      	str	r0, [r7, #12]
 800220c:	60b9      	str	r1, [r7, #8]
 800220e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002210:	68ba      	ldr	r2, [r7, #8]
 8002212:	23c0      	movs	r3, #192	; 0xc0
 8002214:	0159      	lsls	r1, r3, #5
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	0013      	movs	r3, r2
 800221e:	2200      	movs	r2, #0
 8002220:	f7ff ff4e 	bl	80020c0 <SPI_WaitFifoStateUntilTimeout>
 8002224:	1e03      	subs	r3, r0, #0
 8002226:	d007      	beq.n	8002238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800222c:	2220      	movs	r2, #32
 800222e:	431a      	orrs	r2, r3
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e027      	b.n	8002288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	0013      	movs	r3, r2
 8002242:	2200      	movs	r2, #0
 8002244:	2180      	movs	r1, #128	; 0x80
 8002246:	f7ff fead 	bl	8001fa4 <SPI_WaitFlagStateUntilTimeout>
 800224a:	1e03      	subs	r3, r0, #0
 800224c:	d007      	beq.n	800225e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	2220      	movs	r2, #32
 8002254:	431a      	orrs	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e014      	b.n	8002288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	23c0      	movs	r3, #192	; 0xc0
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0013      	movs	r3, r2
 800226c:	2200      	movs	r2, #0
 800226e:	f7ff ff27 	bl	80020c0 <SPI_WaitFifoStateUntilTimeout>
 8002272:	1e03      	subs	r3, r0, #0
 8002274:	d007      	beq.n	8002286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800227a:	2220      	movs	r2, #32
 800227c:	431a      	orrs	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e000      	b.n	8002288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	0018      	movs	r0, r3
 800228a:	46bd      	mov	sp, r7
 800228c:	b004      	add	sp, #16
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e044      	b.n	800232c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d107      	bne.n	80022ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2274      	movs	r2, #116	; 0x74
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	0018      	movs	r0, r3
 80022b6:	f7ff f84d 	bl	8001354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2224      	movs	r2, #36	; 0x24
 80022be:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2101      	movs	r1, #1
 80022cc:	438a      	bics	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f8da 	bl	800248c <UART_SetConfig>
 80022d8:	0003      	movs	r3, r0
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d101      	bne.n	80022e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e024      	b.n	800232c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fa0d 	bl	800270c <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	490d      	ldr	r1, [pc, #52]	; (8002334 <HAL_UART_Init+0xa4>)
 80022fe:	400a      	ands	r2, r1
 8002300:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2108      	movs	r1, #8
 800230e:	438a      	bics	r2, r1
 8002310:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	430a      	orrs	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 faa5 	bl	8002874 <UART_CheckIdleState>
 800232a:	0003      	movs	r3, r0
}
 800232c:	0018      	movs	r0, r3
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}
 8002334:	fffff7ff 	.word	0xfffff7ff

08002338 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	1dbb      	adds	r3, r7, #6
 8002346:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800234c:	2b20      	cmp	r3, #32
 800234e:	d000      	beq.n	8002352 <HAL_UART_Transmit+0x1a>
 8002350:	e096      	b.n	8002480 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d003      	beq.n	8002360 <HAL_UART_Transmit+0x28>
 8002358:	1dbb      	adds	r3, r7, #6
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e08e      	b.n	8002482 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	015b      	lsls	r3, r3, #5
 800236c:	429a      	cmp	r2, r3
 800236e:	d109      	bne.n	8002384 <HAL_UART_Transmit+0x4c>
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d105      	bne.n	8002384 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	2201      	movs	r2, #1
 800237c:	4013      	ands	r3, r2
 800237e:	d001      	beq.n	8002384 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e07e      	b.n	8002482 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2274      	movs	r2, #116	; 0x74
 8002388:	5c9b      	ldrb	r3, [r3, r2]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_UART_Transmit+0x5a>
 800238e:	2302      	movs	r3, #2
 8002390:	e077      	b.n	8002482 <HAL_UART_Transmit+0x14a>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2274      	movs	r2, #116	; 0x74
 8002396:	2101      	movs	r1, #1
 8002398:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2280      	movs	r2, #128	; 0x80
 800239e:	2100      	movs	r1, #0
 80023a0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2221      	movs	r2, #33	; 0x21
 80023a6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023a8:	f7ff f8da 	bl	8001560 <HAL_GetTick>
 80023ac:	0003      	movs	r3, r0
 80023ae:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1dba      	adds	r2, r7, #6
 80023b4:	2150      	movs	r1, #80	; 0x50
 80023b6:	8812      	ldrh	r2, [r2, #0]
 80023b8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1dba      	adds	r2, r7, #6
 80023be:	2152      	movs	r1, #82	; 0x52
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	015b      	lsls	r3, r3, #5
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d108      	bne.n	80023e2 <HAL_UART_Transmit+0xaa>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	e003      	b.n	80023ea <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2274      	movs	r2, #116	; 0x74
 80023ee:	2100      	movs	r1, #0
 80023f0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80023f2:	e02d      	b.n	8002450 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	68f8      	ldr	r0, [r7, #12]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	0013      	movs	r3, r2
 80023fe:	2200      	movs	r2, #0
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	f000 fa7f 	bl	8002904 <UART_WaitOnFlagUntilTimeout>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d001      	beq.n	800240e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e039      	b.n	8002482 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10b      	bne.n	800242c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	881a      	ldrh	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	05d2      	lsls	r2, r2, #23
 800241e:	0dd2      	lsrs	r2, r2, #23
 8002420:	b292      	uxth	r2, r2
 8002422:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	3302      	adds	r3, #2
 8002428:	61bb      	str	r3, [r7, #24]
 800242a:	e008      	b.n	800243e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	781a      	ldrb	r2, [r3, #0]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	b292      	uxth	r2, r2
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	3301      	adds	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2252      	movs	r2, #82	; 0x52
 8002442:	5a9b      	ldrh	r3, [r3, r2]
 8002444:	b29b      	uxth	r3, r3
 8002446:	3b01      	subs	r3, #1
 8002448:	b299      	uxth	r1, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2252      	movs	r2, #82	; 0x52
 800244e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2252      	movs	r2, #82	; 0x52
 8002454:	5a9b      	ldrh	r3, [r3, r2]
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1cb      	bne.n	80023f4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	0013      	movs	r3, r2
 8002466:	2200      	movs	r2, #0
 8002468:	2140      	movs	r1, #64	; 0x40
 800246a:	f000 fa4b 	bl	8002904 <UART_WaitOnFlagUntilTimeout>
 800246e:	1e03      	subs	r3, r0, #0
 8002470:	d001      	beq.n	8002476 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e005      	b.n	8002482 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2220      	movs	r2, #32
 800247a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	0018      	movs	r0, r3
 8002484:	46bd      	mov	sp, r7
 8002486:	b008      	add	sp, #32
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b088      	sub	sp, #32
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002494:	231e      	movs	r3, #30
 8002496:	18fb      	adds	r3, r7, r3
 8002498:	2200      	movs	r2, #0
 800249a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	691b      	ldr	r3, [r3, #16]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	69db      	ldr	r3, [r3, #28]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a8d      	ldr	r2, [pc, #564]	; (80026f0 <UART_SetConfig+0x264>)
 80024bc:	4013      	ands	r3, r2
 80024be:	0019      	movs	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	4a88      	ldr	r2, [pc, #544]	; (80026f4 <UART_SetConfig+0x268>)
 80024d2:	4013      	ands	r3, r2
 80024d4:	0019      	movs	r1, r3
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	430a      	orrs	r2, r1
 80024e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	699b      	ldr	r3, [r3, #24]
 80024e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a1b      	ldr	r3, [r3, #32]
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	4a7f      	ldr	r2, [pc, #508]	; (80026f8 <UART_SetConfig+0x26c>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a7b      	ldr	r2, [pc, #492]	; (80026fc <UART_SetConfig+0x270>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d127      	bne.n	8002562 <UART_SetConfig+0xd6>
 8002512:	4b7b      	ldr	r3, [pc, #492]	; (8002700 <UART_SetConfig+0x274>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	2203      	movs	r2, #3
 8002518:	4013      	ands	r3, r2
 800251a:	2b03      	cmp	r3, #3
 800251c:	d00d      	beq.n	800253a <UART_SetConfig+0xae>
 800251e:	d81b      	bhi.n	8002558 <UART_SetConfig+0xcc>
 8002520:	2b02      	cmp	r3, #2
 8002522:	d014      	beq.n	800254e <UART_SetConfig+0xc2>
 8002524:	d818      	bhi.n	8002558 <UART_SetConfig+0xcc>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <UART_SetConfig+0xa4>
 800252a:	2b01      	cmp	r3, #1
 800252c:	d00a      	beq.n	8002544 <UART_SetConfig+0xb8>
 800252e:	e013      	b.n	8002558 <UART_SetConfig+0xcc>
 8002530:	231f      	movs	r3, #31
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2200      	movs	r2, #0
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e021      	b.n	800257e <UART_SetConfig+0xf2>
 800253a:	231f      	movs	r3, #31
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e01c      	b.n	800257e <UART_SetConfig+0xf2>
 8002544:	231f      	movs	r3, #31
 8002546:	18fb      	adds	r3, r7, r3
 8002548:	2204      	movs	r2, #4
 800254a:	701a      	strb	r2, [r3, #0]
 800254c:	e017      	b.n	800257e <UART_SetConfig+0xf2>
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2208      	movs	r2, #8
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e012      	b.n	800257e <UART_SetConfig+0xf2>
 8002558:	231f      	movs	r3, #31
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2210      	movs	r2, #16
 800255e:	701a      	strb	r2, [r3, #0]
 8002560:	e00d      	b.n	800257e <UART_SetConfig+0xf2>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a67      	ldr	r2, [pc, #412]	; (8002704 <UART_SetConfig+0x278>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d104      	bne.n	8002576 <UART_SetConfig+0xea>
 800256c:	231f      	movs	r3, #31
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2200      	movs	r2, #0
 8002572:	701a      	strb	r2, [r3, #0]
 8002574:	e003      	b.n	800257e <UART_SetConfig+0xf2>
 8002576:	231f      	movs	r3, #31
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2210      	movs	r2, #16
 800257c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69da      	ldr	r2, [r3, #28]
 8002582:	2380      	movs	r3, #128	; 0x80
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	429a      	cmp	r2, r3
 8002588:	d15d      	bne.n	8002646 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 800258a:	231f      	movs	r3, #31
 800258c:	18fb      	adds	r3, r7, r3
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d015      	beq.n	80025c0 <UART_SetConfig+0x134>
 8002594:	dc18      	bgt.n	80025c8 <UART_SetConfig+0x13c>
 8002596:	2b04      	cmp	r3, #4
 8002598:	d00d      	beq.n	80025b6 <UART_SetConfig+0x12a>
 800259a:	dc15      	bgt.n	80025c8 <UART_SetConfig+0x13c>
 800259c:	2b00      	cmp	r3, #0
 800259e:	d002      	beq.n	80025a6 <UART_SetConfig+0x11a>
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d005      	beq.n	80025b0 <UART_SetConfig+0x124>
 80025a4:	e010      	b.n	80025c8 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80025a6:	f7ff fad7 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 80025aa:	0003      	movs	r3, r0
 80025ac:	61bb      	str	r3, [r7, #24]
        break;
 80025ae:	e012      	b.n	80025d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025b0:	4b55      	ldr	r3, [pc, #340]	; (8002708 <UART_SetConfig+0x27c>)
 80025b2:	61bb      	str	r3, [r7, #24]
        break;
 80025b4:	e00f      	b.n	80025d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025b6:	f7ff fa5f 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 80025ba:	0003      	movs	r3, r0
 80025bc:	61bb      	str	r3, [r7, #24]
        break;
 80025be:	e00a      	b.n	80025d6 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025c0:	2380      	movs	r3, #128	; 0x80
 80025c2:	021b      	lsls	r3, r3, #8
 80025c4:	61bb      	str	r3, [r7, #24]
        break;
 80025c6:	e006      	b.n	80025d6 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80025c8:	2300      	movs	r3, #0
 80025ca:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80025cc:	231e      	movs	r3, #30
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2201      	movs	r2, #1
 80025d2:	701a      	strb	r2, [r3, #0]
        break;
 80025d4:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d100      	bne.n	80025de <UART_SetConfig+0x152>
 80025dc:	e07b      	b.n	80026d6 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	005a      	lsls	r2, r3, #1
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	085b      	lsrs	r3, r3, #1
 80025e8:	18d2      	adds	r2, r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0019      	movs	r1, r3
 80025f0:	0010      	movs	r0, r2
 80025f2:	f7fd fd89 	bl	8000108 <__udivsi3>
 80025f6:	0003      	movs	r3, r0
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	2b0f      	cmp	r3, #15
 8002600:	d91c      	bls.n	800263c <UART_SetConfig+0x1b0>
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	2380      	movs	r3, #128	; 0x80
 8002606:	025b      	lsls	r3, r3, #9
 8002608:	429a      	cmp	r2, r3
 800260a:	d217      	bcs.n	800263c <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	b29a      	uxth	r2, r3
 8002610:	200e      	movs	r0, #14
 8002612:	183b      	adds	r3, r7, r0
 8002614:	210f      	movs	r1, #15
 8002616:	438a      	bics	r2, r1
 8002618:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	085b      	lsrs	r3, r3, #1
 800261e:	b29b      	uxth	r3, r3
 8002620:	2207      	movs	r2, #7
 8002622:	4013      	ands	r3, r2
 8002624:	b299      	uxth	r1, r3
 8002626:	183b      	adds	r3, r7, r0
 8002628:	183a      	adds	r2, r7, r0
 800262a:	8812      	ldrh	r2, [r2, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	183a      	adds	r2, r7, r0
 8002636:	8812      	ldrh	r2, [r2, #0]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	e04c      	b.n	80026d6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800263c:	231e      	movs	r3, #30
 800263e:	18fb      	adds	r3, r7, r3
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
 8002644:	e047      	b.n	80026d6 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002646:	231f      	movs	r3, #31
 8002648:	18fb      	adds	r3, r7, r3
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b08      	cmp	r3, #8
 800264e:	d015      	beq.n	800267c <UART_SetConfig+0x1f0>
 8002650:	dc18      	bgt.n	8002684 <UART_SetConfig+0x1f8>
 8002652:	2b04      	cmp	r3, #4
 8002654:	d00d      	beq.n	8002672 <UART_SetConfig+0x1e6>
 8002656:	dc15      	bgt.n	8002684 <UART_SetConfig+0x1f8>
 8002658:	2b00      	cmp	r3, #0
 800265a:	d002      	beq.n	8002662 <UART_SetConfig+0x1d6>
 800265c:	2b02      	cmp	r3, #2
 800265e:	d005      	beq.n	800266c <UART_SetConfig+0x1e0>
 8002660:	e010      	b.n	8002684 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002662:	f7ff fa79 	bl	8001b58 <HAL_RCC_GetPCLK1Freq>
 8002666:	0003      	movs	r3, r0
 8002668:	61bb      	str	r3, [r7, #24]
        break;
 800266a:	e012      	b.n	8002692 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800266c:	4b26      	ldr	r3, [pc, #152]	; (8002708 <UART_SetConfig+0x27c>)
 800266e:	61bb      	str	r3, [r7, #24]
        break;
 8002670:	e00f      	b.n	8002692 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002672:	f7ff fa01 	bl	8001a78 <HAL_RCC_GetSysClockFreq>
 8002676:	0003      	movs	r3, r0
 8002678:	61bb      	str	r3, [r7, #24]
        break;
 800267a:	e00a      	b.n	8002692 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	021b      	lsls	r3, r3, #8
 8002680:	61bb      	str	r3, [r7, #24]
        break;
 8002682:	e006      	b.n	8002692 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002688:	231e      	movs	r3, #30
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
        break;
 8002690:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01e      	beq.n	80026d6 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	085a      	lsrs	r2, r3, #1
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	18d2      	adds	r2, r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	0019      	movs	r1, r3
 80026a8:	0010      	movs	r0, r2
 80026aa:	f7fd fd2d 	bl	8000108 <__udivsi3>
 80026ae:	0003      	movs	r3, r0
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	d909      	bls.n	80026ce <UART_SetConfig+0x242>
 80026ba:	693a      	ldr	r2, [r7, #16]
 80026bc:	2380      	movs	r3, #128	; 0x80
 80026be:	025b      	lsls	r3, r3, #9
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d204      	bcs.n	80026ce <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	60da      	str	r2, [r3, #12]
 80026cc:	e003      	b.n	80026d6 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80026ce:	231e      	movs	r3, #30
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80026e2:	231e      	movs	r3, #30
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	781b      	ldrb	r3, [r3, #0]
}
 80026e8:	0018      	movs	r0, r3
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b008      	add	sp, #32
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	efff69f3 	.word	0xefff69f3
 80026f4:	ffffcfff 	.word	0xffffcfff
 80026f8:	fffff4ff 	.word	0xfffff4ff
 80026fc:	40013800 	.word	0x40013800
 8002700:	40021000 	.word	0x40021000
 8002704:	40004400 	.word	0x40004400
 8002708:	007a1200 	.word	0x007a1200

0800270c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002718:	2201      	movs	r2, #1
 800271a:	4013      	ands	r3, r2
 800271c:	d00b      	beq.n	8002736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	4a4a      	ldr	r2, [pc, #296]	; (8002850 <UART_AdvFeatureConfig+0x144>)
 8002726:	4013      	ands	r3, r2
 8002728:	0019      	movs	r1, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	2202      	movs	r2, #2
 800273c:	4013      	ands	r3, r2
 800273e:	d00b      	beq.n	8002758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	4a43      	ldr	r2, [pc, #268]	; (8002854 <UART_AdvFeatureConfig+0x148>)
 8002748:	4013      	ands	r3, r2
 800274a:	0019      	movs	r1, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	430a      	orrs	r2, r1
 8002756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2204      	movs	r2, #4
 800275e:	4013      	ands	r3, r2
 8002760:	d00b      	beq.n	800277a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a3b      	ldr	r2, [pc, #236]	; (8002858 <UART_AdvFeatureConfig+0x14c>)
 800276a:	4013      	ands	r3, r2
 800276c:	0019      	movs	r1, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277e:	2208      	movs	r2, #8
 8002780:	4013      	ands	r3, r2
 8002782:	d00b      	beq.n	800279c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	4a34      	ldr	r2, [pc, #208]	; (800285c <UART_AdvFeatureConfig+0x150>)
 800278c:	4013      	ands	r3, r2
 800278e:	0019      	movs	r1, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	2210      	movs	r2, #16
 80027a2:	4013      	ands	r3, r2
 80027a4:	d00b      	beq.n	80027be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	4a2c      	ldr	r2, [pc, #176]	; (8002860 <UART_AdvFeatureConfig+0x154>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	0019      	movs	r1, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2220      	movs	r2, #32
 80027c4:	4013      	ands	r3, r2
 80027c6:	d00b      	beq.n	80027e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	4a25      	ldr	r2, [pc, #148]	; (8002864 <UART_AdvFeatureConfig+0x158>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	0019      	movs	r1, r3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e4:	2240      	movs	r2, #64	; 0x40
 80027e6:	4013      	ands	r3, r2
 80027e8:	d01d      	beq.n	8002826 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	4a1d      	ldr	r2, [pc, #116]	; (8002868 <UART_AdvFeatureConfig+0x15c>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	0019      	movs	r1, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	035b      	lsls	r3, r3, #13
 800280a:	429a      	cmp	r2, r3
 800280c:	d10b      	bne.n	8002826 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a15      	ldr	r2, [pc, #84]	; (800286c <UART_AdvFeatureConfig+0x160>)
 8002816:	4013      	ands	r3, r2
 8002818:	0019      	movs	r1, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	430a      	orrs	r2, r1
 8002824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	4013      	ands	r3, r2
 800282e:	d00b      	beq.n	8002848 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <UART_AdvFeatureConfig+0x164>)
 8002838:	4013      	ands	r3, r2
 800283a:	0019      	movs	r1, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	430a      	orrs	r2, r1
 8002846:	605a      	str	r2, [r3, #4]
  }
}
 8002848:	46c0      	nop			; (mov r8, r8)
 800284a:	46bd      	mov	sp, r7
 800284c:	b002      	add	sp, #8
 800284e:	bd80      	pop	{r7, pc}
 8002850:	fffdffff 	.word	0xfffdffff
 8002854:	fffeffff 	.word	0xfffeffff
 8002858:	fffbffff 	.word	0xfffbffff
 800285c:	ffff7fff 	.word	0xffff7fff
 8002860:	ffffefff 	.word	0xffffefff
 8002864:	ffffdfff 	.word	0xffffdfff
 8002868:	ffefffff 	.word	0xffefffff
 800286c:	ff9fffff 	.word	0xff9fffff
 8002870:	fff7ffff 	.word	0xfff7ffff

08002874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af02      	add	r7, sp, #8
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2280      	movs	r2, #128	; 0x80
 8002880:	2100      	movs	r1, #0
 8002882:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002884:	f7fe fe6c 	bl	8001560 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2208      	movs	r2, #8
 8002894:	4013      	ands	r3, r2
 8002896:	2b08      	cmp	r3, #8
 8002898:	d10c      	bne.n	80028b4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2280      	movs	r2, #128	; 0x80
 800289e:	0391      	lsls	r1, r2, #14
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	4a17      	ldr	r2, [pc, #92]	; (8002900 <UART_CheckIdleState+0x8c>)
 80028a4:	9200      	str	r2, [sp, #0]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f000 f82c 	bl	8002904 <UART_WaitOnFlagUntilTimeout>
 80028ac:	1e03      	subs	r3, r0, #0
 80028ae:	d001      	beq.n	80028b4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e021      	b.n	80028f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	2204      	movs	r2, #4
 80028bc:	4013      	ands	r3, r2
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d10c      	bne.n	80028dc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	03d1      	lsls	r1, r2, #15
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	4a0d      	ldr	r2, [pc, #52]	; (8002900 <UART_CheckIdleState+0x8c>)
 80028cc:	9200      	str	r2, [sp, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f000 f818 	bl	8002904 <UART_WaitOnFlagUntilTimeout>
 80028d4:	1e03      	subs	r3, r0, #0
 80028d6:	d001      	beq.n	80028dc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	e00d      	b.n	80028f8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2220      	movs	r2, #32
 80028e0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2220      	movs	r2, #32
 80028e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2274      	movs	r2, #116	; 0x74
 80028f2:	2100      	movs	r1, #0
 80028f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028f6:	2300      	movs	r3, #0
}
 80028f8:	0018      	movs	r0, r3
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b004      	add	sp, #16
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	01ffffff 	.word	0x01ffffff

08002904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b094      	sub	sp, #80	; 0x50
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	603b      	str	r3, [r7, #0]
 8002910:	1dfb      	adds	r3, r7, #7
 8002912:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002914:	e0a3      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002916:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002918:	3301      	adds	r3, #1
 800291a:	d100      	bne.n	800291e <UART_WaitOnFlagUntilTimeout+0x1a>
 800291c:	e09f      	b.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800291e:	f7fe fe1f 	bl	8001560 <HAL_GetTick>
 8002922:	0002      	movs	r2, r0
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800292a:	429a      	cmp	r2, r3
 800292c:	d302      	bcc.n	8002934 <UART_WaitOnFlagUntilTimeout+0x30>
 800292e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002930:	2b00      	cmp	r3, #0
 8002932:	d13d      	bne.n	80029b0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002934:	f3ef 8310 	mrs	r3, PRIMASK
 8002938:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800293a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
 800293e:	2301      	movs	r3, #1
 8002940:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	f383 8810 	msr	PRIMASK, r3
}
 8002948:	46c0      	nop			; (mov r8, r8)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	494c      	ldr	r1, [pc, #304]	; (8002a88 <UART_WaitOnFlagUntilTimeout+0x184>)
 8002956:	400a      	ands	r2, r1
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	f383 8810 	msr	PRIMASK, r3
}
 8002964:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002966:	f3ef 8310 	mrs	r3, PRIMASK
 800296a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800296c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800296e:	643b      	str	r3, [r7, #64]	; 0x40
 8002970:	2301      	movs	r3, #1
 8002972:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002976:	f383 8810 	msr	PRIMASK, r3
}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	689a      	ldr	r2, [r3, #8]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2101      	movs	r1, #1
 8002988:	438a      	bics	r2, r1
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800298e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002992:	f383 8810 	msr	PRIMASK, r3
}
 8002996:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2220      	movs	r2, #32
 800299c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2220      	movs	r2, #32
 80029a2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2274      	movs	r2, #116	; 0x74
 80029a8:	2100      	movs	r1, #0
 80029aa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e067      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2204      	movs	r2, #4
 80029b8:	4013      	ands	r3, r2
 80029ba:	d050      	beq.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69da      	ldr	r2, [r3, #28]
 80029c2:	2380      	movs	r3, #128	; 0x80
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	401a      	ands	r2, r3
 80029c8:	2380      	movs	r3, #128	; 0x80
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d146      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	0112      	lsls	r2, r2, #4
 80029d8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029da:	f3ef 8310 	mrs	r3, PRIMASK
 80029de:	613b      	str	r3, [r7, #16]
  return(result);
 80029e0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80029e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029e4:	2301      	movs	r3, #1
 80029e6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f383 8810 	msr	PRIMASK, r3
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4923      	ldr	r1, [pc, #140]	; (8002a88 <UART_WaitOnFlagUntilTimeout+0x184>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a02:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f383 8810 	msr	PRIMASK, r3
}
 8002a0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a10:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a12:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a14:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a16:	2301      	movs	r3, #1
 8002a18:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	f383 8810 	msr	PRIMASK, r3
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	438a      	bics	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a38:	f383 8810 	msr	PRIMASK, r3
}
 8002a3c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2220      	movs	r2, #32
 8002a42:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	2220      	movs	r2, #32
 8002a48:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2280      	movs	r2, #128	; 0x80
 8002a4e:	2120      	movs	r1, #32
 8002a50:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2274      	movs	r2, #116	; 0x74
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e010      	b.n	8002a80 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	69db      	ldr	r3, [r3, #28]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	4013      	ands	r3, r2
 8002a68:	68ba      	ldr	r2, [r7, #8]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	425a      	negs	r2, r3
 8002a6e:	4153      	adcs	r3, r2
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	001a      	movs	r2, r3
 8002a74:	1dfb      	adds	r3, r7, #7
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d100      	bne.n	8002a7e <UART_WaitOnFlagUntilTimeout+0x17a>
 8002a7c:	e74b      	b.n	8002916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	0018      	movs	r0, r3
 8002a82:	46bd      	mov	sp, r7
 8002a84:	b014      	add	sp, #80	; 0x50
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	fffffe5f 	.word	0xfffffe5f

08002a8c <__libc_init_array>:
 8002a8c:	b570      	push	{r4, r5, r6, lr}
 8002a8e:	2600      	movs	r6, #0
 8002a90:	4d0c      	ldr	r5, [pc, #48]	; (8002ac4 <__libc_init_array+0x38>)
 8002a92:	4c0d      	ldr	r4, [pc, #52]	; (8002ac8 <__libc_init_array+0x3c>)
 8002a94:	1b64      	subs	r4, r4, r5
 8002a96:	10a4      	asrs	r4, r4, #2
 8002a98:	42a6      	cmp	r6, r4
 8002a9a:	d109      	bne.n	8002ab0 <__libc_init_array+0x24>
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	f000 f87d 	bl	8002b9c <_init>
 8002aa2:	4d0a      	ldr	r5, [pc, #40]	; (8002acc <__libc_init_array+0x40>)
 8002aa4:	4c0a      	ldr	r4, [pc, #40]	; (8002ad0 <__libc_init_array+0x44>)
 8002aa6:	1b64      	subs	r4, r4, r5
 8002aa8:	10a4      	asrs	r4, r4, #2
 8002aaa:	42a6      	cmp	r6, r4
 8002aac:	d105      	bne.n	8002aba <__libc_init_array+0x2e>
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
 8002ab0:	00b3      	lsls	r3, r6, #2
 8002ab2:	58eb      	ldr	r3, [r5, r3]
 8002ab4:	4798      	blx	r3
 8002ab6:	3601      	adds	r6, #1
 8002ab8:	e7ee      	b.n	8002a98 <__libc_init_array+0xc>
 8002aba:	00b3      	lsls	r3, r6, #2
 8002abc:	58eb      	ldr	r3, [r5, r3]
 8002abe:	4798      	blx	r3
 8002ac0:	3601      	adds	r6, #1
 8002ac2:	e7f2      	b.n	8002aaa <__libc_init_array+0x1e>
 8002ac4:	08002f90 	.word	0x08002f90
 8002ac8:	08002f90 	.word	0x08002f90
 8002acc:	08002f90 	.word	0x08002f90
 8002ad0:	08002f94 	.word	0x08002f94

08002ad4 <__itoa>:
 8002ad4:	1e93      	subs	r3, r2, #2
 8002ad6:	b510      	push	{r4, lr}
 8002ad8:	000c      	movs	r4, r1
 8002ada:	2b22      	cmp	r3, #34	; 0x22
 8002adc:	d904      	bls.n	8002ae8 <__itoa+0x14>
 8002ade:	2300      	movs	r3, #0
 8002ae0:	001c      	movs	r4, r3
 8002ae2:	700b      	strb	r3, [r1, #0]
 8002ae4:	0020      	movs	r0, r4
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	2a0a      	cmp	r2, #10
 8002aea:	d109      	bne.n	8002b00 <__itoa+0x2c>
 8002aec:	2800      	cmp	r0, #0
 8002aee:	da07      	bge.n	8002b00 <__itoa+0x2c>
 8002af0:	232d      	movs	r3, #45	; 0x2d
 8002af2:	700b      	strb	r3, [r1, #0]
 8002af4:	2101      	movs	r1, #1
 8002af6:	4240      	negs	r0, r0
 8002af8:	1861      	adds	r1, r4, r1
 8002afa:	f000 f80f 	bl	8002b1c <__utoa>
 8002afe:	e7f1      	b.n	8002ae4 <__itoa+0x10>
 8002b00:	2100      	movs	r1, #0
 8002b02:	e7f9      	b.n	8002af8 <__itoa+0x24>

08002b04 <itoa>:
 8002b04:	b510      	push	{r4, lr}
 8002b06:	f7ff ffe5 	bl	8002ad4 <__itoa>
 8002b0a:	bd10      	pop	{r4, pc}

08002b0c <memset>:
 8002b0c:	0003      	movs	r3, r0
 8002b0e:	1882      	adds	r2, r0, r2
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d100      	bne.n	8002b16 <memset+0xa>
 8002b14:	4770      	bx	lr
 8002b16:	7019      	strb	r1, [r3, #0]
 8002b18:	3301      	adds	r3, #1
 8002b1a:	e7f9      	b.n	8002b10 <memset+0x4>

08002b1c <__utoa>:
 8002b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b1e:	000c      	movs	r4, r1
 8002b20:	0016      	movs	r6, r2
 8002b22:	b08d      	sub	sp, #52	; 0x34
 8002b24:	2225      	movs	r2, #37	; 0x25
 8002b26:	0007      	movs	r7, r0
 8002b28:	4916      	ldr	r1, [pc, #88]	; (8002b84 <__utoa+0x68>)
 8002b2a:	a802      	add	r0, sp, #8
 8002b2c:	f000 f82c 	bl	8002b88 <memcpy>
 8002b30:	1e62      	subs	r2, r4, #1
 8002b32:	9200      	str	r2, [sp, #0]
 8002b34:	1eb3      	subs	r3, r6, #2
 8002b36:	aa02      	add	r2, sp, #8
 8002b38:	2500      	movs	r5, #0
 8002b3a:	9201      	str	r2, [sp, #4]
 8002b3c:	2b22      	cmp	r3, #34	; 0x22
 8002b3e:	d904      	bls.n	8002b4a <__utoa+0x2e>
 8002b40:	7025      	strb	r5, [r4, #0]
 8002b42:	002c      	movs	r4, r5
 8002b44:	0020      	movs	r0, r4
 8002b46:	b00d      	add	sp, #52	; 0x34
 8002b48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4a:	0038      	movs	r0, r7
 8002b4c:	0031      	movs	r1, r6
 8002b4e:	f7fd fb61 	bl	8000214 <__aeabi_uidivmod>
 8002b52:	000b      	movs	r3, r1
 8002b54:	9a01      	ldr	r2, [sp, #4]
 8002b56:	0029      	movs	r1, r5
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	9a00      	ldr	r2, [sp, #0]
 8002b5c:	3501      	adds	r5, #1
 8002b5e:	5553      	strb	r3, [r2, r5]
 8002b60:	003b      	movs	r3, r7
 8002b62:	0007      	movs	r7, r0
 8002b64:	429e      	cmp	r6, r3
 8002b66:	d9f0      	bls.n	8002b4a <__utoa+0x2e>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	0022      	movs	r2, r4
 8002b6c:	5563      	strb	r3, [r4, r5]
 8002b6e:	000b      	movs	r3, r1
 8002b70:	1ac8      	subs	r0, r1, r3
 8002b72:	4283      	cmp	r3, r0
 8002b74:	dde6      	ble.n	8002b44 <__utoa+0x28>
 8002b76:	7810      	ldrb	r0, [r2, #0]
 8002b78:	5ce5      	ldrb	r5, [r4, r3]
 8002b7a:	7015      	strb	r5, [r2, #0]
 8002b7c:	54e0      	strb	r0, [r4, r3]
 8002b7e:	3201      	adds	r2, #1
 8002b80:	3b01      	subs	r3, #1
 8002b82:	e7f5      	b.n	8002b70 <__utoa+0x54>
 8002b84:	08002f68 	.word	0x08002f68

08002b88 <memcpy>:
 8002b88:	2300      	movs	r3, #0
 8002b8a:	b510      	push	{r4, lr}
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d100      	bne.n	8002b92 <memcpy+0xa>
 8002b90:	bd10      	pop	{r4, pc}
 8002b92:	5ccc      	ldrb	r4, [r1, r3]
 8002b94:	54c4      	strb	r4, [r0, r3]
 8002b96:	3301      	adds	r3, #1
 8002b98:	e7f8      	b.n	8002b8c <memcpy+0x4>
	...

08002b9c <_init>:
 8002b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b9e:	46c0      	nop			; (mov r8, r8)
 8002ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ba2:	bc08      	pop	{r3}
 8002ba4:	469e      	mov	lr, r3
 8002ba6:	4770      	bx	lr

08002ba8 <_fini>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr
